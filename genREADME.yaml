# author: Nuno Aguiar

ojob:
  async   : true  
  opacks  :
  - Badgen: 20230603
  channels:
    create:
      - name: opacks
        type: dummy
      - name: outputs
        type: simple

include:
- badgen.yaml

todo:
  - Gather opack info trigger
  - Generate version badge
  - Get list of opacks
  - Generate README.md

jobs:
  # --------------------------------
  - name    : Generate version badge
    type    : subscribe
    typeArgs:
      chSubscribe: outputs
    exec    : |
      if (args.op != "set" && args.op != "setall") return
      if (args.op == "set") args.v = [ args.v ]
      
      for(var ii in args.v) {
        var pack = args.v[ii]
        
        log(" generating badge '" + ".github/badges/" + pack.name + ".svg'"
        $job("Badgen generate file", {
           label     : pack.name,
           labelColor: "grey3",
           color     : "blue",
           status    : pack.version,
           icon      : "openaf_grey.svg",
           file      : ".github/badges/" + pack.name + ".svg"
        })
      }
  
  #####################################
  - name    : Gather opack info trigger
    type    : subscribe
    typeArgs:
      chSubscribe: opacks
    exec    : |
      if (args.op != "set" && args.op != "setall") return;
      if (args.op == "set") args.v = [ args.v ];
      
      for(var ii in args.v) {
        var fileInfo = args.v[ii];

        var pack = {};
        if (io.fileExists(fileInfo.canonicalPath + "/.package.yaml")) {
          pack = io.readFileYAML(fileInfo.canonicalPath + "/.package.yaml");
        } else {
          // it's json?
          if (io.fileExists(fileInfo.canonicalPath + "/.package.json")) {
            pack = io.readFile(fileInfo.canonicalPath + "/.package.json");
          } else {
            logWarn("Ignoring " + fileInfo.filename + "...");
          }
        }

        $ch("outputs").set({ name: pack.name }, pack);
      }

  ##########################
  - name: Get list of opacks
    exec: |
      $ch("opacks").setAll(["canonicalPath"],
        $from(io.listFiles(".").files)
        .equals("isDirectory", true)
        .notEquals("filename", ".git")
        .sort("filename")
        .select()
      );

      $ch("opacks").waitForJobs();

  - name: Generate README.md
    deps: 
      - Get list of opacks
    exec: |
      io.writeFileString("README.md", templify("\
        # openaf-opacks\n\
        \n\
        List of OpenAF opacks:\n\
        \n\
        | Name   | Description   |\n\
        |--------|---------------|\n\
        {{#each opacks}}\n\
        |{{name}}|{{description}}|\n\
        {{/each}}\n\
        \
      ", { opacks: $from($ch("outputs").getAll()).sort("name").select() }));
