init:
  l: []

ojob:
  logToConsole: false
  sequential: true

todo:
- List

jobs:
- name: List
  exec: |
    
    var lst, localLst = []
    var hd = String(java.lang.System.getProperty("user.home")).replace(/\\/g, "/") + "/.{{url}}".replace(/\:+/g, "_");
    io.mkdir(hd);
    if (io.fileExists(hd + "/ojobs")) {
      var lst = $from(listFilesRecursive(hd + "/ojobs"))
               .ends("filename", "yaml")
               .orEnds("filename", "json")
               .notStarts("filename", "_")
               .select(r => r.filepath.replace(hd + "/ojobs", "_local"))
      localLst = localLst.concat(lst) 
      args.init.l = args.init.l.concat(lst)
    }
    if (isDef(__flags) && isDef(__flags.OJOB_LOCALPATH)) {
      var lst = $from(listFilesRecursive(__flags.OJOB_LOCALPATH))
                .ends("filename", "yaml")
                .orEnds("filename", "json")
                .notStarts("filename", "_")
                .select(r => r.filepath.replace(__flags.OJOB_LOCALPATH, "_global"))
      localLst = localLst.concat(lst)
      args.init.l = args.init.l.concat(lst)
    }

    if (isDef(args.search) || isDef(args.list)) {
      if (isDef(args.list)) {
         ow.oJob.output(args.init.l, args);
         return;
      }

      lst = $from(args.init.l)
      .contains(args.search)
      .sort()
      .select();

      ow.oJob.output(lst, args);
    } else {
      plugin("Console");
      var o = args.init.l.map(r => r.replace(/^{{proto}}:\/\/{{url}}\//g, "").replace(/\.ya?ml$/, "").replace(/\.json$/, ""));

      var con = new Console();
      con.getConsoleReader().setExpandEvents(false);
      con.getConsoleReader().setHistoryEnabled(true);
      var hist = new Packages.jline.console.history.FileHistory(new java.io.File(hd + "/.history"));
      con.getConsoleReader().setHistory(hist);
      con.getConsoleReader().addCompleter(new Packages.jline.console.completer.StringsCompleter(o));

      print(ansiColor("BOLD", "── {{name}} " + repeat(con.getConsoleReader().getTerminal().getWidth() - (4 + {{lname}}), "─")) + "\n" + ansiColor("ITALIC", "Start completing the URI and/or hit TAB to auto-complete to select the ojob to execute (you can hit Ctrl-C at any time to abort):") + "\n");
      var cmd, ct = 0;
      while (o.indexOf(cmd) < 0 && ct < 2) { cmd = con.readLinePrompt(">> {{url}}/").trim(); ct++ }
      hist.flush();

      if (cmd != "") {
        var oj;
        if (!cmd.startsWith("_local/") && !cmd.startsWith("_global/")) 
           oj = $rest().get("{{proto}}://{{url}}/" + cmd);
        else {
           if (localLst.indexOf(cmd + ".yaml") >= 0) cmd += ".yaml";
           if (localLst.indexOf(cmd + ".yml") >= 0) cmd += ".yml";
           if (localLst.indexOf(cmd + ".json") >= 0) cmd += ".json";

           if (cmd.startsWith("_local/")) {
               if (cmd.match(/\.ya?ml$/))
                  oj = io.readFileYAML(hd + cmd.replace(/^_local\//, "/ojobs/"));
               else
                  oj = io.readFileJSON(hd + cmd.replace(/^_local\//, "/ojobs/"));
           }
           
           if (cmd.startsWith("_global/")) {
               if (cmd.match(/\.ya?ml$/))
                  oj = io.readFileYAML(__flags.OJOB_LOCALPATH + cmd.replace(/^_global\//, "/"));
               else
                  oj = io.readFileJSON(__flags.OJOB_LOCALPATH + cmd.replace(/^_global\//, "/"));
           }

        }
           
        var hcmd = [];
  
        if (isDef(ow.oJob.askOnHelp)) {
          print(repeat(con.getConsoleReader().getTerminal().getWidth(), "─"))
          var _r = ow.oJob.askOnHelp(oj.help)

          if (isDef(_r)) {
            args = merge(args, _r)
          }
        } else {
          var h = $from(oj.jobs).equals("name", "Help").at(0)
          if (isUnDef(h) && isDef(oj.help)) h = oj
          if (isDef(h) && isDef(h.help) && isDef(h.help.text)) {
            print("\n" + ansiColor("BOLD", "Job description:\n") + ansiColor("ITALIC", "\"" + h.help.text + "\""));
          }
          if (isDef(h) && isDef(h.help) && isDef(h.help.expects)) {
            print("\n" + ansiColor("ITALIC", "Please fill out the job arguments (no value entered is equivalent to not providing the argument):") );
            h.help.expects.forEach(r => {
                print("\n  \"" + r.desc + "\"");
                var tmp = String(con.readLinePrompt("  (" + ansiColor("BOLD", r.name) + "): "));
                if (tmp != "") {
                  args[r.name] = tmp;
                  hcmd.push(r.name + "=" + tmp);
                }
            });
          }
          
          print("");
          if (cmd.startsWith("_local/")) {
            print(ansiColor("ITALIC", "Executing the equivalent command to:") + "\n'" + ansiColor("GREEN", "$ ojob " + hd + cmd.replace(/^_local\//, "/ojobs/") + (hcmd.length > 0 ? " " : "") + hcmd.join(" ")) + "'\n")
          } else {
            if (cmd.startsWith("_global/")) {
              print(ansiColor("ITALIC", "Executing the equivalent command to:") + "\n'" + ansiColor("GREEN", "$ ojob " + __flags.OJOB_LOCALPATH + cmd.replace(/^_global\//, "/") + (hcmd.length > 0 ? " " : "") + hcmd.join(" ")) + "'\n")
            } else {
              print(ansiColor("ITALIC", "Executing the equivalent command to:") + "\n'" + ansiColor("GREEN", "$ ojob " + ("{{proto}}".toLowerCase() != "https" ? "http://" : "") + "{{url}}/" + cmd + (hcmd.length > 0 ? " " : "") + hcmd.join(" ")) + "'\n");
            }
          }
          print(ansiColor("BOLD", repeat(con.getConsoleReader().getTerminal().getWidth(), "─")));
          print("");
        }

        var res = oJobRun(oj, args, now());

        if (isDef(res)) ow.oJob.output(res, args);
      }
    }
