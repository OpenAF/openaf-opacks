# Author: Nuno Aguiar
help: 
  text   : Generates a hash integrity file
  expects: 
  - name     : url
    desc     : A oJobIO URL server (or local path) for which to generate a hash integrity file
    example  : https://ojob.io
    mandatory: true
  - name     : file
    desc     : Saving the result into a JSON file
    example  : integrity.json
    mandatory: false

todo:
- Generate hash list

ojob:
  opacks      :
  - openaf: 20220822
  catch       : logErr(exception)
  logToConsole: true   # to change when finished
  channels    :
    create:
    - name: hashes

jobs:
# -------------------------
- name : Generate hash list
  each : Generate hash
  check:
    in:
      url : isString
      file: isString.default(__)
  exec : |
    log("Retrieve list of jobs from URL...")
    
    var urls
    if (args.url.toLowerCase().match(/^https?\:\/\//)) {
      global.isLocal = false
      urls = $rest().get(args.url).init.l
    } else {
      global.isLocal = true
      urls = listFilesRecursive(args.url).map(r => r.filepath)
    }
    
    log("Found #" + urls.length + " urls.")

    urls.forEach(url => each({ url: url }))
    
    ow.loadObj()
    var hashes = {}
    $from($ch("hashes").getAll())
    .sort("url")
    .select(v => hashes[v.url] = v.hash)

    if (isDef(args.file)) io.writeFileJSON(args.file, hashes)
    ow.oJob.output(hashes, args)

# --------------------
- name : Generate hash
  check:
    in:
      url: isString
  exec : |
    var url
    if (global.isLocal) {
      url = args.url
    } else {
      url = args.url.replace(/\.yaml$/, "")
    }
    log("Checking " + url + "...")
    if (global.isLocal) {
      $ch("hashes").set({ url: url }, { url: url, hash: "sha384-" + sha384(io.readFileStream(url)) })
    } else {
      $ch("hashes").set({ url: url }, { url: url, hash: "sha384-" + sha384($rest().get2Stream(url)) })
    }
