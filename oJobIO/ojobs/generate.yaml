help:
  text   : Generates an oJob.io job template to jump start the creation of a new job.
  expects:
  - name     : jobs
    desc     : Comma separated list of jobs (e.g. "Stuff\\ to\\ do,Other\\ jobs") 
    example  : Stuff\\ to\\ do,Other\\ jobs
    mandatory: false
  - name     : args
    desc     : Comma separated list of arguments (e.g. "abc,xyz")
    example  : abc,xyz
    mandatory: false
  - name     : author
    desc     : The author to add on the comments
    example  : Anonymous
    mandatory: false
  - name     : async
    desc     : If the job is sequential or async (e.g. "true")
    example  : "false"
    mandatory: false

init:
  tmpl: |
    # Author: {{author}}
    help:
      text   : Does stuff. 
      expects: 
      {{#each args}}
      - name     : {{name}}
        desc     : To do {{name}}
        example  : aValueExample
        mandatory: false
      {{/each}}

    todo:
    {{#if config}}
    - Init
    {{/if}}
    {{#each jobs}}
    - {{name}}
    {{/each}} 

    ojob:
      opacks      :
      - openaf: 20211229
      catch       : if (isDef(exception.javaException)) exception.javaException.printStackTrace(); else printErr(exception)
      logToConsole: true   # to change when finished
      {{#if async}}async       : true
      {{/if}}{{#if config}}
    include:
    - ojob.io/_common{{/if}}      

    jobs:
    {{~#if config}}
    # ----------
    - name: Init
      from: oJobIO configuration
      args:
        __store  : something
        #__options:
        #  askSet: true
        __config :
        - name   : something
          type   : encrypt
          default: stuff
      exec: |
        global.something = args.something;{{/if}}{{#each jobs}}
    # -------{{sep}}
    - name : {{name}}
      check:
        in:
          {{#each ../args}}
          {{name}}: isString{{#if ../config}}.default(global.{{name}}){{else}}.default(__){{/if}}
          {{/each}}
      exec : |
        ow.oJob.output(args, args)
    {{/each}}

todo:
- Generate Job

ojob:
  opacks      :
  - openaf: 20200523
  catch       : logErr(exception);
  logToConsole: false

jobs:
# ------------------
- name : Generate Job
  exec : |
    args.jobs   = _$(args.jobs, "jobs").default("Sample job")
    args.author = _$(args.author, "author").default("Anonymous")
    args.async  = _$(args.async, "async").default(void 0)
    args.file   = _$(args.file, "file").default(void 0)
    args.args   = _$(args.args, "args").default("something")

    args.jobs = args.jobs.split(",")
    args.jobs = args.jobs.map(j => {
       return {
         name: j.trim(),
         sep : repeat(j.trim().length, "-")
       }
    });

    args.args = args.args.split(",")
    args.args = args.args.map(j => {
      return {
        name: j.trim()
      }
    })

    var res = templify(args.init.tmpl, { 
      author: args.author,
      jobs  : args.jobs,
      args  : args.args,
      async : (isDef(args.async) && args.async.toLowerCase() == "true" ? true : false),
      config: (isDef(args.config) && args.config.toLowerCase() == "true" ? true : false)
    });
    
    if (isDef(args.file)) 
      io.writeFileString(args.file, res)
    else
      printnl(res)