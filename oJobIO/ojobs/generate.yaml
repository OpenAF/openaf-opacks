init:
  tmpl: |
    # Author: {{author}}

    todo:
    {{#if config}}
    - Init
    {{/if}}
    {{#each jobs}}
    - {{name}}
    {{/each}} 

    ojob:
      {{#if async}}async       : true{{/if}}
      opacks      :
      - openaf: 20200523
      catch       : logErr(exception);
      logToConsole: true   # to change when finished
    {{#if config}}

    include:
    - ojob.io/_common
    {{/if}}      

    jobs:
    # ----------
    - name: Help
      help: 
        text   : Does stuff. 
        expects: 
        - name   : something
          desc   : To do stuff
          example: aValueExample

    {{#if config}}
    # ----------
    - name: Init
      from: oJobIO configuration
      args:
        __store  : something
        #__options:
        #  askSet: true
        __config :
        - name   : something
          type   : encrypt
          default: stuff
      exec: |
        global.something = args.something;

    {{/if}}
    {{#each jobs}}
    # ------{{sep}}
    - name: {{name}}
      exec: |
        _$(args.something, "something").{{#if ../config}}default(global.something){{else}}$_(){{/if}};

        ow.oJob.output(args, args);

    {{/each}}

todo:
- Generate Job

ojob:
  sequential  : true
  opacks      :
  - openaf: 20200523
  catch       : logErr(exception);
  logToConsole: false

jobs:
# ----------
- name: Help
  help: 
    text   : Generates an oJob.io job template to jump start the creation of a new job.
    expects:
    - name   : jobs
      desc   : Comma separated list of jobs (e.g. "Stuff\\ to\\ do,Other\\ jobs") 
      example: Stuff\\ to\\ do,Other\\ jobs
    - name   : author
      desc   : The author to add on the comments
      example: Anonymous
    - name   : async
      desc   : If the job is sequential or async (e.g. "true")
      example: "false"

# ------------------
- name: Generate Job
  exec: |
    args.jobs   = _$(args.jobs, "jobs").default("Sample job");
    args.author = _$(args.author, "author").default("Anonymous");
    args.async  = _$(args.async, "async").default(void 0);

    args.jobs = args.jobs.split(",");
    args.jobs = args.jobs.map(j => {
       return {
         name: j.trim(),
         sep : repeat(j.trim().length, "-")
       }
    });

    print(templify(args.init.tmpl, { 
      author: args.author,
      jobs  : args.jobs,
      async : (isDef(args.async) && args.async.toLowerCase() == "true" ? true : false),
      config: (isDef(args.config) && args.config.toLowerCase() == "true" ? true : false)
    }));
