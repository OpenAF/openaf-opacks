# Author: Nuno Aguiar
init:
  name  : oJob.io
  url   : ojob.io
  proto : https
  lname : 7
  intro : |
    These are a set of frequent routines (denominated [oJobs](https://docs.openaf.io/docs/concepts/oJob)) across several domains. To execute any of them you just need to [install OpenAF](https://docs.openaf.io/#installing) and execute:

    ````bash
    ojob {{URL}}/domain/routine param1=value1 param2=value2
    ```` 

    Clicking on each of the links below will get you a brief explanation and example of each oJob available in this repository. You can also check more execution options on the [ojob.io documentation](https://docs.openaf.io/docs/concepts/oJobIO.html).

    ---

todo:
- ojob final report
- Prepare output
- Copy content
- Copy static resources
- Get oJob-commons
- Finish output

ojob:
  async       : true
  argsFromEnvs: true
  opacks      :
  - oJob-common
  - plugin-GIT

include:
- ojob.json

jobs:
# --------------------
- name: Prepare output
  exec: |
    io.rm("_output")
    io.mkdir("_output")
    $sh("sudo apk add zip unzip").exec()
    global.diff = []
    if (io.fileExists("_output.zip")) {
      $sh("mkdir _tmp && cd _tmp && unzip ../_output.zip").exec()
    }

# --------------------
- name : Finish output
  check:
    in:
      output: isString.default("output")
      compile: toBoolean.isBoolean.default(false)
  deps :
  - Get oJob-commons
  - Copy content
  exec : |
    args.init.proto = _$(args.PROTO, "PROTO").default(args.init.proto)
    args.init.name  = _$(args.NAME, "NAME").default(args.init.name)
    args.init.url   = _$(args.URL, "URL").default(args.init.url)
    args.init.lname = args.init.name.length
    var l = [], lp = []
     
    $from(listFilesRecursive("_output"))
    .notStarts("filename", ".")
    .attach("dir", r => (r.isFile ? r.filepath.substr(0, r.filepath.lastIndexOf("/")) : r.filepath))
    .sort("dir", "-isDirectory", "filename")
    .select(r => {
       if (r.filename.endsWith(".yaml") || r.filename.endsWith(".json")) {
          var orig = r.filepath
          if (r.filename == "index.yaml") r.filepath = r.filepath.replace(/index\.yaml$/, "")
          if (r.filename != ".package.yaml") {
            l.push( args.init.proto + "://" + args.init.url + r.filepath.replace(/^_output\//, "/") )
            lp.push(orig)
          }
       } else {
          if (r.isDirectory && r.filename != "common" && r.filename != "js" && r.filename != "css") lp.push(r.filepath)
       }
    })

    var mdindex = "# " + args.init.url + "<img src='/logo.png' align='right'/>\n"
    mdindex += templify(args.init.intro, args) + "\n"
    var htmlmdindex = mdindex
    var cuuid = $atomic()
    var tasks = []

    lp.forEach(f => {
       var _o = f.replace(/^_output\//, "")
       if (io.fileInfo(f).isDirectory) {
         mdindex += "\n## " + f.replace(/^_output\//, args.init.url + "/") + "\n"
         htmlmdindex += "\n## " + f.replace(/^_output\//, args.init.url + "/") + "\n"
         return true
       }

       var j
       try {
         if (f.match(/\.ya?ml$/)) j = io.readFileYAML(f)
         if (f.match(/\.json$/))  j = io.readFileJSON(f)
         if (isUnDef(j)) {
           f += "/index.yaml"
           j = io.readFileYAML(f)
         }
       } catch(e) {
         logErr("Problem reading file '" + f + "': " + String(e))
       }

       if (isDef(j) && isDef(j.jobs) && ($from(j.jobs).equals("name", "Help").any() || isDef(j.help))) {
        tasks.push($do(() => {
          if (global.diff.indexOf("_tmp/" + _o) < 0 || !io.fileExists("_tmp/" + _o.replace(/(\.ya?ml|\.json)$/, ".md")) || !io.fileExists("_tmp/" + _o.replace(/(\.ya?ml|\.json)$/, ".html")) ) {
            log("Generating markdown for " + f + "...")
            $sh(templify(getOpenAFPath() + "ojob ojobs/doc.yaml job={{job}} name={{name}} mdfile={{mdfile}} output={{output}} html={{html}}", {
              job   : f,
              name  : f.replace(/^_output\//, args.init.url + "/").replace(/(\/index)?(\.ya?ml|\.json)$/, ""),
              mdfile: f.replace(/(.+)\/(.+)(\.ya?ml|\.json)$/, "$1/_$2.md"),
              output: f.replace(/(\.ya?ml|\.json)$/, ".md"),
              html  : f.replace(/(\.ya?ml|\.json)$/, ".html"),
            }))
            .exec()
          } else {
            log("Copying markdown for " + f + "...")
            io.cp("_tmp/" + _o.replace(/(\.ya?ml|\.json)$/, ".md"), f.replace(/(\.ya?ml|\.json)$/, ".md"))
            io.cp("_tmp/" + _o.replace(/(\.ya?ml|\.json)$/, ".html"), f.replace(/(\.ya?ml|\.json)$/, ".html"))
          }
        }).catch(e => logErr(f + " | " + e)))
       }
       
       if (isDef(j) && (isDef(j.jobs) || isDef(j.todo)) && (f.match(/\.(ya?ml)$/)) ) {
          tasks.push($do(() => {
            log("Generate static version for " + f + "...")
            if (args.compile) {
              $sh(templify(getOpenAFPath() + "ojob ojobs/compile.yaml source={{source}} target={{target}}", {
                source : f,
                target : f.replace(/\.(ya?ml)$/, ".json")
              }))
              .exec()
            }
            var _target = f.replace(/\.(ya?ml)$/, ".json")
            log("Checking for " + _target + "...")
            if (!io.fileExists(_target)) {
              log("Write to " + _target + "...")
              io.writeFileJSON(_target, (args.compile ? io.readFileJSON(f) : io.readFileYAML(f)), "")
            }
            log("Write to " + _target.replace(/\.json$/, ""))
            io.cp(_target, _target.replace(/\.json$/, ""))
          }))
       }
       
       if (!io.fileInfo(f).filename.startsWith("_") && !(io.fileInfo(f).filepath.indexOf("/common/") >= 0) ) {
         var mentry   = f.replace(/^_output\//, args.init.url + "/").replace(new RegExp("^" + args.init.url), "").replace(/(\.ya?ml)|(\.json)$/, "")
         mdindex     += "  * [" + mentry + "](" + mentry + ".md)\n"
         htmlmdindex += "  * [" + mentry + "](" + mentry + ".html)\n"
       }
       return 1
    })

    $doWait($doAll(tasks))

    io.writeFileString("_output/index.md", mdindex)
    io.writeFileString("_output/index.html", ow.template.parseMD2HTML(htmlmdindex, true))
    
    var _tmpl = af.fromYAML(templify(io.readFileString("rebuild.hbs"), args.init))
    _tmpl.init.l = l
    io.writeFileJSON("_output/index.json", _tmpl)
    io.cp("imgs/openaf.png", "_output/logo.png")
    io.cp("imgs/favicon.ico", "_output/favicon.ico")

    // Generate bash auto complete
    var lst = io.readFileJSON("_output/index.json").init.l
    lst = lst.map(r => r.replace(/^https?:\/\//, "").replace(/\.yaml$/, ""))
    var out = "complete -W '" + lst.join(" ") + "' -o default ojob"
    io.writeFileString("_output/autoComplete.sh", out)
  
    io.rm(args.output)
    io.mv("_output", args.output)

    log("Creating _output.zip...")
    $sh()
    .pwd(args.output)
    .sh(getOpenAFPath() + "ojob hash.yaml url=. file=_integrity.json")
    .sh("zip -9r _output.zip *")
    .exec()

# ----------------------
- name: Get oJob-commons
  deps: Prepare output
  exec: |
    plugin("GIT")
    var git = new GIT()
    io.rm("_output/common")
    git.clone("https://github.com/openaf/oJob-common.git", "_output/common")
    io.rm("_output/common/.git")
    io.rm("_output/common/.github")

# ------------------
- name: Copy content
  deps:
  - Prepare output
  - Get oJob-commons
  exec: |
    $from(listFilesRecursive("ojobs")).sort("-isDirectory").select(r => {
      try {
       var _t = "_tmp" + r.filepath.replace(/^ojobs\//, "/")
       if (io.fileExists(_t) && r.isFile) {
         var _ss = io.readFileStream(r.canonicalPath)
         var _ts = io.readFileStream(_t)
         var _s5 = md5(_ss)
         var _t5 = md5(_ts)
         _ss.close()
         _ts.close()
         if (_s5 == _t5) global.diff.push(_t)
       } else {
        global.diff.push(_t)
       }
       if (r.isFile) {
         log("Copying " + r.filepath + "...")
         io.cp(r.canonicalPath, "_output" + r.filepath.replace(/^ojobs\//, "/"))
       } else {
         log("Creating folder " + r.filepath + "...")
         io.mkdir("_output" + r.filepath.replace(/^ojobs\//, "/"))
       }
      } catch(e) {
         logErr("Error while copying " + r.filepath + ": " + e)
      }
    })

# ---------------------------
- name: Copy static resources
  deps: Prepare output
  exec: |
    var _copy = (source,target)=>{
      try {
        var is = af.fromBytes2InputStream(io.readFileBytes(getOpenAFJar() + "::" + source))
        var os = io.writeFileStream("_output/" + target)

        ioStreamCopy(os, is)
      } catch(e) {
        logErr("Error copying static resources from: " + e)
      }
    }

    io.writeFileString("_output/error.html", "Not found!")

    var ar = [ "css/github-gist.css", "css/github-markdown.css", "css/nJSMap.css", "js/highlight.js" ]
    ar.forEach(r => _copy(r, r))
