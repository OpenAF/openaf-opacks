consts:
  outputDir: &OUTPUT_DIR .

todo:
- Clean up
- Download jars
- Compile XLS plugin
- Prepare XLS jar
- Prepare help
- Clean up end

jobs:
  # ----------------------
  - name: Clean up classes
    args:
      outputDir: *OUTPUT_DIR
    exec: |
      var classes = $path(listFilesRecursive(args.outputDir), "[?ends_with(filename, '.class')].filepath");
      classes.forEach((afile) => {
        io.rm(afile);
      });

  # -------------------
  - name: Clean up jars
    args:
      outputDir: *OUTPUT_DIR
    exec: |
      var classpath = $path(io.listFilenames(args.outputDir), "[?ends_with(@, '.jar')]");
      classpath.forEach((afile) => {
        io.rm(afile);
      });

  ################
  - name: Clean up
    to  :
    - Clean up classes
    - Clean up jars

  # ------------------
  - name: Clean up end
    deps:
    - Prepare XLS jar
    to  :
    - Clean up classes

  #####################
  - name: Download jars
    deps:
      - Clean up
    args:
      - outputDir: *OUTPUT_DIR
    exec: |
      ow.loadJava();
      var arts = io.readFileYAML(".maven.yaml");
      var maven = new ow.java.maven();
      maven.processMavenFile(args.outputDir);

  ##########################
  - name: Compile XLS plugin
    #deps:
    #  - Download jars
    args:
      - outputDir: *OUTPUT_DIR
    exec: |
      ow.loadFormat();

      io.rm(args.outputDir + "/plugin-xls.jar");
      var classpath = $path(io.listFilenames(args.outputDir), "[?ends_with(@, '.jar')]");
      classpath.push(getOpenAFJar());
      
      __flags.ALTERNATIVES.listFilesRecursive=false
      var _lst = listFilesRecursive(args.outputDir + "/src")
      log("Identified #" + _lst.length + " files in src folder...")
      var sources = $path(_lst, "[?ends_with(filename, '.java')].filepath")
      var sep = java.io.File.pathSeparator;
      log("Identified #" + sources.length + " sources and #" + classpath.length + " jars...")
      $sh(["javac", "-source", "1.8", "-target", "1.8", "-Xlint:deprecation", "-cp", classpath.join(sep) ].concat(sources))
      .pwd(args.outputDir)
      .exec()
 
  ####################### 
  - name: Prepare XLS jar
    deps:
      - Compile XLS plugin
    args:
      - outputDir: *OUTPUT_DIR
    exec: |
      plugin("ZIP");
      var zip = new ZIP();
      __flags.ALTERNATIVES.listFilesRecursive=false
      var _lst = listFilesRecursive(args.outputDir + "/src")
      log("Identified #" + _lst.length + " files in src folder...")
      var classes = $path(_lst, "[?ends_with(filename, '.class')].filepath");
      classes.forEach((afile) => {
        log("Packing " + afile.replace(args.outputDir + "/src/", "") + "...");
        zip.streamPutFileStream(args.outputDir + "/plugin-xls.jar", afile.replace(args.outputDir + "/src/", ""), io.readFileStream(afile));
      });

  ####################
  - name: Prepare help
    deps:
      - Compile XLS plugin
    args:
      - outputDir: *OUTPUT_DIR
    exec: | 
      saveHelp(args.outputDir, { "xls": args.outputDir + "/src/openaf/plugins/XLS.java",
                                 "doc": args.outputDir + "/src/openaf/plugins/DOC.java" })
