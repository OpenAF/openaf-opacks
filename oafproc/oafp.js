showHelp=()=>{__initializeCon();var a=(getOPackPath("oafproc")||".")+"/README.md";io.fileExists(a)?(__conConsole=__ansiColorFlag=!0,isDef(ow.format.string.pauseString)?ow.format.string.pauseString(ow.format.withMD(io.readFileString(a))):print(ow.format.withMD(io.readFileString(a)))):print("Check https://github.com/OpenAF/openaf-opacks/blob/master/oafproc/README.md");exit(0)};ow.loadFormat();-1<__expr.indexOf(" -h")&&showHelp();
var _file=params.file,_format=params.output||params.format,_type=params.input||params.type,_from=params.from,_sql=params.sql,_path=params.path,_csv=params.csv,_pause=params.pause,_sortmapkeys=params.sortmapkeys,_searchkeys=params.searchkeys,_searchvalues=params.searchvalues,_xmlignored=params.xmlignored,_xmlprefix=params.xmlprefix,_xmlfiltertag=params.xmlfiltertag,_ndjsonjoin=params.ndjsonjoin;const _fileExtensions=new Map([[".json","json"],[".yaml","yaml"],[".xml","xml"],[".csv","csv"]]);
var _inputNoMem=new Set(["csv"]),_inputLineFns={ndjson:(a,b)=>{_ndjsonjoin||($o(jsonParse(a,__,__,!0),b),noFurtherOutput=!0)}},_transformFns={_sortmapkeys:a=>toBoolean(_sortmapkeys)&&isObject(a)?sortMapKeys(a):a,_searchkeys:a=>isObject(a)?searchKeys(a,_searchkeys):a,_searchvalues:a=>isObject(a)?searchValues(a,_searchvalues):a};
const _transform=a=>{for(var b=Object.keys(_transformFns),c=0;c<b.length;c++){var d=b[c];isDef(global[d])&&(a=_transformFns[d](a))}return a},_$o=(a,b)=>{b.__path&&(a=$path(a,b.__path),delete b.__path);b.__from&&(a=$from(a).query(af.fromNLinq(b.__from)),delete b.__from);b.__sql&&(a=$sql(a,b.__sql),delete b.__sql);a=_transform(a);$o(a,b)};
var _outputFns=new Map([["yaml",(a,b)=>_$o(af.fromYAML(a),b)],["xml",(a,b)=>{_xmlignored=_$(_xmlignored,"xmlignored").isString().default(__);_xmlprefix=_$(_xmlprefix,"xmlprefix").isString().default(__);_xmlfiltertag=toBoolean(_$(_xmlfiltertag,"xmlfiltertag").isString().default(__));_$o(af.fromXML2Obj(a,_xmlignored,_xmlprefix,_xmlfiltertag),b)}],["ndjson",(a,b)=>{_ndjsonjoin?_$o(a.split("\n").map(c=>jsonParse(c.trim(),__,__,!0)),b):io.readLinesNDJSON(af.fromString2InputStream(a),c=>{_$o(c,b)})}],["md",
(a,b)=>{__conConsole=__ansiColorFlag=!0;print(ow.format.withMD(a))}],["csv",(a,b)=>{isDef(_file)?(a=io.readFileStream(_file),_$o($csv().fromInStream(a).toOutArray(),b),a.close()):_$o($csv().fromInString(a).toOutArray(),b)}],["json",(a,b)=>_$o(jsonParse(a,__,__,!0),b)]]);_format=_$(_format,"format").isString().default("ctree");__initializeCon();var options={__format:_format,__from:_from,__sql:_sql,__path:_path,__csv:_csv,__pause:_pause};"ndjson"==_type&&(_ndjsonjoin=toBoolean(_$(_ndjsonjoin,"ndjsonjoin").isString().default(__)));
var _res="",noFurtherOutput=!1;isDef(_file)?_inputNoMem.has(_type)||(_res=io.readFileString(_file)):(_res=[],io.pipeLn(a=>{if(isDef(_inputLineFns[_type]))_inputLineFns[_type](_transform(a),options);else _res.push(a);return!1}),_res=_res.join("\n"));
if(!noFurtherOutput){if(isUnDef(_type)){if(isDef(_file)){let a=_file.substring(_file.lastIndexOf("."));isDef(_fileExtensions[a])&&(_type=_fileExtensions[a])}if(isUnDef(_type)){let a=_res.trim();a.startsWith("{")||a.startsWith("[")?_type="json":a.startsWith("<")?_type="xml":isString(a)&&0<a.length?1<a.substring(0,a.indexOf("\n")).split(",").length?_type="csv":a.substring(0,0<a.indexOf(": "))&&(_type="yaml"):(printErr("Please provide the input type."),exit(-1))}}isDef(_outputFns.has(_type))?_outputFns.get(_type)(_res,
options):_outputFnsget("json")(_res,options)};
