author: Nuno Aguiar
scripts:
  preerase: ''
  posterase: |
    ow.loadFormat()
    var isWin = ow.format.isWindows()

    // If opack installed near OpenAF
    if (io.fileExists(getOpenAFPath() + "oafp")) {
      logWarn("Removing " + getOpenAFPath() + "oafp...")
      io.rm(getOpenAFPath() + "oafp")
    }

    // If Linux and root, install in /usr/bin or /bin if oaf is there also
    if (!isWin && ow.format.getUserName() == "root") {
      if (io.fileExists("/usr/bin/oafp")) {
        logWarn("Removing /usr/bin/oafp...")
        io.rm("/usr/bin/oafp")
      }
      if (io.fileExists("/bin/oafp")) {
        logWarn("Removing /bin/oafp...")
        io.rm("/bin/oafp")
      }
    }

    // If opack installed in user space
    if (getOpenAFPath().startsWith(String(java.lang.System.getProperty("java.io.tmpdir")) + "/_oaf_")) {
      if (io.rm("oafp")) logWarn("Removing oafp...")
    }
  preinstall: ''
  postinstall: |
    var installPath
    ow.loadFormat()
    var isWin = ow.format.isWindows()

    if (outputPath.startsWith(getOpenAFPath())) {
      // If opack installed near OpenAF
      log("Installing 'oafp' in " + getOpenAFPath() + "...")
      io.cp(outputPath + "/oafp.js", getOpenAFPath() + "oafp.js")
      $sh(getOpenAFPath() + "oaf --sb " + getOpenAFPath() + "oafp.js").exec()
      log("Renaming oafp.js to oafp...")
      io.mv(getOpenAFPath() + "oafp.js", getOpenAFPath() + "oafp")
      installPath = getOpenAFPath() + "oafp"

      // If Linux and root, install in /usr/bin or /bin if oaf is there also
      if (!isWin && ow.format.getUserName() == "root") {
        var installIn = __
        if (io.fileExists("/usr/bin/oaf")) installIn = "/usr/bin"
        if (io.fileExists("/bin/oaf"))     installIn = "/bin"
        if (isDef(installIn)) {
          io.writeFileString(installIn + "/oafp", "#!/bin/sh\n/bin/sh " + installPath + " \"$@\"")
          $sh("chmod a+x " + installIn + "/oafp").exec()
        }
      }
    } else {
      // If opack installed in user space
      log("Creating 'oafp'...")
      io.cp(outputPath + "/oafp.js", "oafp.js")
      $sh(getOpenAFPath() + "oaf --sb oafp.js").exec()
      log("Renaming oafp.js to oafp...")
      io.mv("oafp.js", "oafp")
      installPath = "oafp"
    }
    if (!isWin) $sh("chmod a+x " + installPath).exec()

    // Determine if it's static install
    if (getOpenAFPath().startsWith(String(java.lang.System.getProperty("java.io.tmpdir")) + "/_oaf_")) {
      log("Static install detected.")
      $sh("ln -s " + installPath + " oafp").exec()
      installPath = "oafp"
    }

    print("\n --> Run '" + (installPath.indexOf("/") < 0 ? "./"+installPath : installPath) + " -h' for usage details <--\n")
keywords:
- data
- processor
- yaml
- json
- xml
- csv
- ndjson
- slon
- md
- visualisation
- oafp
bugs:
  url: https://github.com/OpenAF/openaf-opacks/issues
repository:
  type: http
  url: https://openaf.io/opacks/oafp.opack
description: A command-line data processor for various input and output formats with query capabilities.
name: oafproc
main: oafp.js
mainJob: ''
license: https://github.com/OpenAF/openaf-opacks/blob/master/LICENSE
version: '20240127'
dependencies:
  openaf: '>=20231222'
files:
- .package.yaml
- README.md
- build/build.yaml
- build/oafp.source.js
- oafp.js
- tests/autoTest.js
- tests/autoTest.yaml
filesHash:
  README.md: 775336fd49bfd92f2e0886135bc597d177ff062e
  build/build.yaml: 6336b246b812bbb468116b229d39749b7c2d437a
  build/oafp.source.js: 6452e969f67049ad3876f904c092f5cf5bd2764e
  oafp.js: d5db2133849c9d3d2b6b598299d09b1374f6957c
  tests/autoTest.js: 7e7947029b6cdb6c6effef5d5a0b2dd9e88de027
  tests/autoTest.yaml: 322544d3a1686428cf6a87e4b8b56660ffd8ae7b
