author: Nuno Aguiar
scripts:
  preerase: ''
  posterase: |
    ow.loadFormat()
    var isWin = ow.format.isWindows()

    // If opack installed near OpenAF
    if (io.fileExists(getOpenAFPath() + "oafp")) {
      logWarn("Removing " + getOpenAFPath() + "oafp...")
      io.rm(getOpenAFPath() + "oafp")
    }

    // If Linux and root, install in /usr/bin or /bin if oaf is there also
    if (!isWin && ow.format.getUserName() == "root") {
      if (io.fileExists("/usr/bin/oafp")) {
        logWarn("Removing /usr/bin/oafp...")
        io.rm("/usr/bin/oafp")
      }
      if (io.fileExists("/bin/oafp")) {
        logWarn("Removing /bin/oafp...")
        io.rm("/bin/oafp")
      }
    }

    // If opack installed in user space
    if (getOpenAFPath().startsWith(String(java.lang.System.getProperty("java.io.tmpdir")) + "/_oaf_")) {
      if (io.rm("oafp")) logWarn("Removing oafp...")
    }
  preinstall: ''
  postinstall: |
    var installPath
    ow.loadFormat()
    var isWin = ow.format.isWindows()

    if (outputPath.startsWith(getOpenAFPath())) {
      // If opack installed near OpenAF
      log("Installing 'oafp' in " + getOpenAFPath() + "...")
      io.cp(outputPath + "/oafp.js", getOpenAFPath() + "oafp.js")
      $sh(getOpenAFPath() + "oaf --sb " + getOpenAFPath() + "oafp.js").exec()
      log("Renaming oafp.js to oafp...")
      io.mv(getOpenAFPath() + "oafp.js", getOpenAFPath() + "oafp")
      installPath = getOpenAFPath() + "oafp"

      // If Linux and root, install in /usr/bin or /bin if oaf is there also
      if (!isWin && ow.format.getUserName() == "root") {
        var installIn = __
        if (io.fileExists("/usr/bin/oaf")) installIn = "/usr/bin"
        if (io.fileExists("/bin/oaf"))     installIn = "/bin"
        if (isDef(installIn)) {
          io.writeFileString(installIn + "/oafp", "#!/bin/sh\n" + installPath + " \"$@\"\n")
          $sh("chmod a+x " + installIn + "/oafp").exec()
        }
      }
    } else {
      // If opack installed in user space
      log("Creating 'oafp'...")
      io.cp(outputPath + "/oafp.js", "oafp.js")
      $sh(getOpenAFPath() + "oaf --sb oafp.js").exec()
      log("Renaming oafp.js to oafp...")
      io.mv("oafp.js", "oafp")
      installPath = "oafp"
    }
    if (!isWin) $sh("chmod a+x " + installPath).exec()

    // Determine if it's static install
    if (getOpenAFPath().startsWith(String(java.lang.System.getProperty("java.io.tmpdir")) + "/_oaf_")) {
      log("Static install detected.")
      $sh("ln -s " + installPath + " oafp").exec()
      installPath = "oafp"
    }

    print("\n --> Run '" + (installPath.indexOf("/") < 0 ? "./"+installPath : installPath) + " -h' for usage details <--\n")
keywords:
- data
- processor
- yaml
- json
- xml
- csv
- ndjson
- slon
- md
- visualisation
- oafp
bugs:
  url: https://github.com/OpenAF/openaf-opacks/issues
repository:
  type: http
  url: https://openaf.io/opacks/oafproc.opack
description: A command-line data processor for various input and output formats with query capabilities.
name: oafproc
main: oafp.js
mainJob: ''
license: https://github.com/OpenAF/openaf-opacks/blob/master/LICENSE
version: '20240131'
dependencies:
  openaf: '>=20231222'
files:
- .package.yaml
- README.md
- build/build.yaml
- build/oafp.source.js
- buildStaticOAFP.yaml
- docs/FILTERS.md
- docs/TEMPLATE.md
- docs/USAGE.md
- oafp.js
- oafp.yaml
- tests/autoTest.js
- tests/autoTest.yaml
filesHash:
  README.md: 896dd498c723a8a1301ba46d1df347263403b3f6
  build/build.yaml: 7548c8db8d109081d85a111ff2cd3767b2c20ade
  build/oafp.source.js: 7903d66d6a544d5b5973cce7192381ddde89ee82
  buildStaticOAFP.yaml: 3cfba475fdd4c1cb8c7fc90c4462647805626b75
  docs/FILTERS.md: 289bcdd328a806d894d79aa0a8b68a903e3ff1c4
  docs/TEMPLATE.md: 9a2bd251824efb34c75398fd4511e9ddfb4811d1
  docs/USAGE.md: f986a5dae7f2a655a3e876f2860f7147b0d0056c
  oafp.js: c6621852f64121a8259869ad49e4d15d80bd562e
  oafp.yaml: 0ccfbe956be834c63fb7491ede70e4d187c99a95
  tests/autoTest.js: e886f97d0e72ed75c3658e868d567ceb38ecbd9c
  tests/autoTest.yaml: 0e197b1ec984280b55d6e53c591dd6eb87d803c2
