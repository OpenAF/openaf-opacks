<html>

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1.0" />
    {{#if title}}
    <title>{{title}}</title>
    {{else}}
    <title>OpenAF-console</title>
    {{/if}}
    <link href="/_css/jquery.contextMenu.min.css" rel="stylesheet"/>
    <link href="/css/materialize-icon.css" rel="stylesheet"/>
    <link rel="shortcut icon" type="image/png" href="/_images/openaf.png"/>
    <style>
        .contextmenu-custom {
            font-family: Arial, sans-serif;
            font-size  : {{fontsize}};
        }
        .avalue {
        color: #0000AA;
        font-size: small;
        }
        .avalueNA {
        color: #AAAAAA;
        font-size: small;
        }
        .atable {
        border: 1px solid lightgray;
        border-spacing: 0;
        line-height: 1;
        box-sizing: border-box;
        border-collapse: collapse;
        font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
        color: #000088;
        margin-top: 5;
        margin-left: 5;
        margin-right: 5;
        margin-bottom: 5;
        font-size: {{fontsize}};
        }
        .atablehead {
        padding: 3px;
        border: 1px solid lightgray;
        font-size: small;
        text-align: left;
        }        
        .atablecell {
        padding: 3px;
        border: 1px solid lightgray;
        color: #0000AA;
        font-size: small;
        text-align: left;       
        }
        .atablecell tr:nth-child(even) {
        background: rgb(250, 250, 250);
        }   
    </style>
</head>

<body>
    {{#if title}}<div class="contextmenu-custom" style="heigth: 32; text-align: left"><img height="22" align="right" src="/_images/openaf.png"><b>{{title}}</b></div>
    <div class="context-menu-one" id="editor" style="width: 100%; heigth: 100%; position: absolute; top: 32; right: 0; bottom: 0; left: 0; border-top: 1px dotted orange; font-size: {{fontsize}}"></div>
    <div class="context-menu-one" id="shower" style="background-color: white; filter: invert({{tableInverse}}%); width: 100%; heigth: 100%; position: absolute; top: 32; right: 0; bottom: 0; left: 0; border-top: 1px dotted orange; font-size: {{fontsize}}"></div>
    {{else}}
    <div class="context-menu-one" id="editor" style="width: 100%; heigth: 100%; position: absolute; top: 0; right: 0; bottom: 0; left: 0; font-size: {{fontsize}}"></div>
    <div class="context-menu-one" id="shower" style="background-color: white; filter: invert({{tableInverse}}%); width: 100%; heigth: 100%; position: absolute; top: 0; right: 0; bottom: 0; left: 0; font-size: {{fontsize}}"></div>
    {{/if}}
    <script src="/js/jquery.js"></script>
    <script src="/js/openafsigil.js"></script>
    <script src="/_js/jquery.contextMenu.min.js"></script>
    <script src="/_js/jquery.ui.position.min.js"></script>
    <script src="/_ace/ace.js"></script>
    <script src="/_js/Chart.bundle.min.js"></script>
    <script>
        var doKill = true, wordwrap = false, height = 200, width = 400, tableData, chartObj;

        function getUrlParameter(name) {
            name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
            var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
            var results = regex.exec(location.search);
            return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
        };

        function chart(aContainer, aData) {
            $("#" + aContainer).html("<canvas id='chart'></canvas>");

            if (!(Array.isArray(aData))) {
                alert("Can't generate a chart without an array.");
                return;
            }

            var ii = -1;
            var fcolor = (op) => {
                ii++;
                var o = ii % 6;
                switch(o) {
                case 0: return "rgba(255,99,132," + op + ")"
                case 1: return "rgba(54, 162, 235, "+ op + ")"
                case 2: return "rgba(255, 206, 86, "+ op + ")"
                case 3: return "rgba(75, 192, 192, "+ op + ")"
                case 4: return "rgba(153, 102, 255, "+ op + ")"
                case 5: return "rgba(255, 159, 64, "+ op + ")"
                }
            };

            var labels = [], datasets = [];
            for(var i = 1; i < Object.keys(aData[0]).length; i++) {
                datasets.push({
                    label: Object.keys(aData[0])[i],
                    data: [],
                    borderColor: [],
                    backgroundColor: [],
                    borderWidth: 1
                });
            }

            for(var i = 0; i < aData.length; i++) {
                labels.push(aData[i][Object.keys(aData[i])[0]]);
                for(var j = 0; j < datasets.length; j++) {
                    datasets[j].data.push(aData[i][datasets[j].label]);
                    var oo = fcolor(0.2);
                    datasets[j].backgroundColor.push(oo);
                    oo = oo.replace(", 0.2", ", 1");
                    datasets[j].borderColor.push(oo);
                    datasets[j].fill = false;
                }
            }

            var options = {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: datasets
                },
                options: {
                    animation: { 
                        duration: 0, 
                        responsiveAnimationDuration: 0 
                    }
                }
            };

            options = $.extend(true, options, {{{chartOptions}}});

            chartObj = new Chart(document.getElementById("chart").getContext("2d"), options);
        };

        function render(aValue, aType) {
            chartObj = void 0;

            // If undefined
            if ($$(aValue).isUnDef()) {
                aValue = "not available";
                aType = "undefined";
            }

            // If object
            var _render = (aValue) => {
                if (!($$(aValue).isObject())) {
                    if ($$(aValue).isNumber()) return "<span style=\"color: midnightblue\">" + aValue + "</span>";
                    if ($$(aValue).isString()) return "<span style=\"color: DarkSlateGray\">" + aValue + "</span>";
                    if (typeof aValue == "boolean") return "<span style=\"color: steelblue\">" + aValue + "</span>";
                    return aValue;
                }

                var out = "";
                if ($$(aValue).isArray() && aValue.length > 0) {
                    var out = "";
                    if ($$(aValue[0]).isMap()) {
                        out += "<table class=\"atable\"><tr>";
                        for(var i in aValue[0]) {
                            out += "<td class=\"atablehead\" style=\"text-align: center\"><span style=\"color: darkblue;font-weight: bold;\">" + i + "</span></td>";
                        }
                        out += "</tr>";
                    } else {
                        out += "<table class=\"atable\">";
                    }
                    for(var x in aValue) {
                        out += "<tr>";
                        if (!($$(aValue[x]).isMap()) && !($$(aValue[x]).isArray())) {
                            out += "<td class=\"atablecell\" style=\"text-align: center\"><span style=\"color: darkblue;font-weight: bold;\">" + aValue[x] + "</span></td>";
                        } else {
                            for(var y in aValue[x]) {
                                out += "<td class=\"atablecell\" style=\"text-align: center\">" + _render(aValue[x][y]) + "</td>";
                            }
                        }
                        out += "</tr>";
                    }
                    out += "</table>";
                } else {
                    var out = "<table class=\"atable\">";
                    for(var i in aValue) {
                        out += "<tr><td class=\"atablecell\" style=\"text-align: right; vertical-align: top\"><span style=\"color: darkblue;font-weight: bold;\">" + i + "</span></td><td class=\"atablecell\">" + _render(aValue[i]) + "</td></tr>";
                    }
                    out += "</table>";
                }
                return out;
            };

            if ($$(aValue).isObject()) {
                var out = "";
                out += _render(aValue);
                aValue = out;
            }

            switch(aType) {
                case "date"     : return (new Date(aValue)).toLocaleString() + "";
                case "undefined": return "<span class=\"avalueNA\">" + aValue + "</span>";
                default:
                    return "<span class=\"avalue\">" + aValue + "</span>";
            }
        }

        function send() {
            if (type == "table" || type == "chart") {
                try {
                    var value = tableData;
                    $.ajax({ async: false, type: "POST", url: "/{{id}}/e/u", data: { e: value, t: type }, success: () => {}});
                } catch(e) {
                    alert(e);
                }
            } else {
                try {
                    var value = editor.getValue();
                    $.ajax({ async: false, type: "POST", url: "/{{id}}/e/u", data: { e: value, t: type }, success: () => {}});
                } catch(e) {
                    alert(e);
                }
            }
        }

        function beautify() {
            var canContinue = true;
            var _o = editor.getSession().getAnnotations(); 
            _o.forEach((v) => { 
                if (v.type == "error") {Â 
                    canContinue = false; 
                } 
            });

            if (canContinue && type != "table" && type != "chart") {
                var value = editor.getValue();
                $.ajax({ async: false, type: "POST", url: "/{{id}}/e/b", data: { e: value, t: type }, success: (pdata) => {
                    try {
                        $("#shower").hide();
                        $("#editor").show();
                        editor.session.setValue(pdata.e);
                        if (pdata.t != "pmap" && pdata.t != "parametermap") {
                            editor.session.setMode("ace/mode/" + pdata.t);
                        } else {  
                            editor.session.setMode("ace/mode/xml");
                        }
                        editor.clearSelection();
                        type = pdata.t;
                    } catch(e) {
                        alert(e);
                    }
                }});
            }
        }

        function refresh() {
            //var value = editor.getValue();
            if (type == "table" || type == "chart") {
                $.ajax({ async: false, type: "GET", url: "/{{id}}/e/d", data: { t: type }, success: (pdata) => {
                    try {
                        if (type == "table") $("#shower").html(render(pdata.e), pdata.t);
                        if (type == "chart") chart("shower", pdata.e);
                        type = pdata.t;
                        tableData = pdata.e;
                        $("#shower").show();
                        $("#editor").hide();
                        imBeautify = true;
                    } catch(e) {
                        alert(e);
                    }
                }});
            } else {
                $.ajax({ async: false, type: "GET", url: "/{{id}}/e/d", data: { t: type }, success: (pdata) => {
                    try {
                        $("#shower").hide();
                        $("#editor").show();
                        editor.session.setValue(pdata.e);
                        if (pdata.t != "pmap" && pdata.t != "parametermap") {
                            editor.session.setMode("ace/mode/" + pdata.t);
                        } else {  
                            editor.session.setMode("ace/mode/xml");
                        }
                        editor.clearSelection();
                        type = pdata.t;
                        imBeautify = false;
                    } catch(e) {
                        alert(e);
                    }
                }});
            }
        }

        function popup() {
            var newwin = window.open("/{{id}}/e.html?p=1", null, "height=" + height + ",width=" + width + ",status=no,toolbar=no,menubar=no,location=no,title=OpenAF-console");
            newwin.focus();
            doKill = false;
            window.close();
        }

        function toogleWordWrap() {
            wordwrap = !wordwrap;
            editor.session.setUseWrapMode(wordwrap);
        }

        window.onbeforeunload = function(event) {
            if (doKill) {
                send();
                $.ajax({ async: false, type: 'GET', url: '/{{id}}/e/q', success: function(d) {}});
            } 
        }   

        // ACE
        var editor = ace.edit("editor");
        editor.session.setMode("ace/mode/json");
        editor.setShowPrintMargin(false);

        var type = "{{type}}";
        var confMap = {};
        var imPopup = false, imSave = true, imBeautify = false;

        if (getUrlParameter("p") == 1) {
            imPopup = true;
        }

        refresh();

        $(function() {
            $.contextMenu({
                selector: '.context-menu-one', 
                className: 'contextmenu-custom material-icons',
                callback: function(key, options) {
                    switch(key) {
                    case "popup": 
                        popup();
                        break;
                    case "reload":
                        refresh();
                        break;
                    case "wordwrap":   
                        toogleWordWrap();
                        break;
                    case "save":
                        send();
                        break;
                    case "yaml":
                        send();
                        type = "yaml";
                        editor.session.setMode("ace/mode/yaml");
                        refresh();
                        break;
                    case "json":
                        send();
                        type = "json";
                        editor.session.setMode("ace/mode/json");
                        refresh();
                        break;
                    case "xml":
                        send();
                        type = "xml";
                        editor.session.setMode("ace/mode/xml");
                        refresh();
                        break;
                    case "beautify":
                        beautify();
                        break;
                    case "pmap":
                        send();
                        type = "pmap";
                        editor.session.setMode("ace/mode/xml");
                        refresh();
                        break;
                    case "parametermap":
                        send();
                        type = "parametermap";
                        editor.session.setMode("ace/mode/xml");
                        refresh();
                        break;                        
                    case "text":
                        send();
                        type = "text";
                        editor.session.setMode("ace/mode/text");
                        refresh();
                        break;
                    case "table":
                        send();
                        type = "table";
                        refresh();
                        break;
                    case "chart":
                        send();
                        type = "chart";
                        refresh();
                        break;                        
                    };
                },
                items: {
                {{#is type 'xml'}}
                    "xml"     : {name: "in XML"},
                {{else}}
                    "yaml"    : {name: "in YAML" },
                    "json"    : {name: "in JSON" },
                    "table"   : {name: "in a table"},
                    "chart"   : {name: "in a chart"},
                {{#if ocli}}
                    "pmap"        : {name: "in PMap" },
                    "parametermap": {name: "in ParameterMap" },
                {{/if}}
                {{/is}}
                    "sep1"    : "---------",
                    "wordwrap": {name: "toggle Word Wrap"},
                    "beautify": {name: "Beautify", disabled: () => { return imBeautify; }},
                    "sep2"    : "---------",
                    "reload"  : {name: "Reload" }, 
                    "save"    : {name: "Save", disabled: () => { return imSave; }},
                    "popup"   : {name: "Popup", disabled: () => { return imPopup; }}
                }
            });  
        });

        function setKeys(useInReadOnly) {
            editor.commands.addCommand({
                name   : "save",
                bindKey: { win: "Alt-S", mac: "Ctrl-S" },
                exec   : function(editor) {
                    if (!imSave) send();
                }
            });
            editor.commands.addCommand({
                name   : "reload",
                bindKey: { win: "Alt-R", mac: "Ctrl-R" },
                exec   : function(editor) {
                    refresh();
                }
            });  
            editor.commands.addCommand({
                name   : "popup",
                bindKey: { win: "Ctrl-Alt-P", mac: "Ctrl-Option-P" },
                exec   : function(editor) {
                    if (!imPopup) popup();
                }
            }); 
            editor.commands.addCommand({
                name   : "beautify",
                bindKey: { win: "Ctrl-Alt-B", mac: "Ctrl-Option-B" },
                exec   : function(editor) {
                    beautify();
                }
            }); 
            
            if (useInReadOnly) {
                editor.commands.on("exec", function(e) {
                    switch(e.command.name) {
                    case "reload": 
                        refresh(); 
                        break;
                    case "popup" : 
                        if (!imPopup) popup(); 
                        break;
                    default: 
                        if (!e.command.readOnly) e.preventDefault();
                    }
                });
            }
            
            $("body").keydown(function(e) {
                if (type == "table" || type == "chart") {
                    var evtobj = window.event ? event : e
                    if (evtobj.keyCode == 82 && evtobj.altKey) {
                        refresh();
                    }
                }
            });
        }

        $.get("/{{id}}/e/m", (data) => {
            if (data.ro) {
                //editor.setReadOnly(true);
                $("a").remove("#save");
                setKeys(true);
            }
            if (data.watch) {
                window.setInterval(function(){
                    refresh();
                }, data.watch);
            }
            if (data.wordwrap) {
                wordwrap = !data.wordwrap;
                toogleWordWrap();
            }
            if (data.width) {
                width = data.width;
            }
            if (data.height) {
                height = data.height;
            }
            if (data.theme) {
                editor.setTheme("ace/theme/" + data.theme);
            }
            if (data.type) {
                type = data.type;
            }
            if (data.save) {
                imSave = !(data.save);
            }
        });

        setKeys();
    </script>
</body>
