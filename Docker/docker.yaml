# Author: Nuno Aguiar

jobs:
  #------------------
  - name: Docker Pull
    help: >
      Tries to pull a container. Expects:
         image     (String)  The docker image to pull.
         rurl      (String)  Optional remote docker url.
         pathSSL   (String)  Optional path to SSL certificates.
         notExists (Boolean) Only pull if it doesn't exist.
    exec: |
      var dpath = getOPackPath("Docker");
      //if (isUnDef(dpath)) throw "No Docker oPack installed. Please install by executing 'opack install Docker'";
      load("docker.js");

      var d = new Docker(args.rurl, args.pathSSL);
      if (args.notExists) {
        if (!d.imageExists(args.image)) {
          d.pull(args.image);
        }
      } else {
        d.pull(args.image);
      }

  #---------------------
  - name: Docker Execute
    help: >
      Executes a command on a docker container. Expects:
        
         image   (String)       The docker image to run the command.
         cmd     (String/Array) The command to execute.
         envs    (Map)          A map of environments variables.
         rurl    (String)       Optional remote docker url.
         pathSSL (String)       Optional path to SSL certificates. 
         extra   (Map)          Extra map entries for docker image creation.

      The result will be available in args.res.
    exec: |
      var dpath = getOPackPath("Docker");
      if (isUnDef(dpath)) throw "No Docker oPack installed. Please install by executing 'opack install Docker'";
      args.cmd = _$(args.cmd).default("");
      load("docker.js");

      var d = new Docker(args.rurl, args.pathSSL); 
      args.res = d.execCmd(args.image, args.cmd, args.envs, args.extra);

  ###########################
  - name: Docker Execute JSON
    help: >
      Executes a command on a docker container. Expects:
        
         image   (String)       The docker image to run the command.
         cmd     (String/Array) The command to execute.
         envs    (Map)          A map of environments variables.
         rurl    (String)       Optional remote docker url.
         pathSSL (String)       Optional path to SSL certificates. 
         extra   (Map)          Extra map entries for docker image creation.

      The result will be available in args.res as a map parsed from the logs.
    from: Docker Execute
    exec: |
      args.res = jsonParse(args.res);

  #------------------
  - name: Docker oJob
    help: >
      Tries to execute an oJob on an openaf docker container. Expects:

        ojob           (string) The complete path to the ojob file to execute
        envs           (map)    Map with the environment variables to use
        binds          (array)  Array of strings in the form "localPath:dockerPath" or "volumeName:dockerPath" to use
        image          (string) The openaf docker image to use (defaults to openaf/openaf)
        name           (string) Optional name for the container
        shouldWait     (string) Boolean string to determine if it should wait for the end of the execution (defaults to "true")
        shouldRemove   (string) Boolean string to determine if it should remove the container on the end of the execution if shouldWait = "true" (default to "true")
        shouldShowLogs (string) Boolean string to determine if it should print logs on the end of execution if shouldWait = "true" (default to "true")
    exec: |
      // Argument checking
      args.image          = _$(args.image, "image").default("openaf/openaf:nightly");
      args.shouldWait     = _$(args.shouldWait, "shouldWait").default("true");
      args.shouldRemove   = _$(args.shouldRemove, "shouldRemove").default("true");
      args.shouldShowLogs = _$(args.shouldShowLogs, "shouldShowLogs").default("true");
      _$(args.ojob, "ojob").$_();
      args.envs   = _$(args.envs, "envs").isMap().default({});

      // Set oJob
      args.envs.OJOB = args.ojob;

      // Prepare envs
      var envs = [];
      Object.keys(args.envs).forEach(k => {
        envs.push(k + "=" + args.envs[k]);
      });

      // Go
      loadLib("docker.js");
      var docker = new Docker();
      var container = docker.create({
          Image: args.image,
          Env  : envs,
          AttachStdout: true,
          AttachStderr: true,
          Binds: args.binds
      }, args.name);
      docker.start(container.Id);

      // Wait for it
      if (String(args.shouldWait).toLowerCase() == "true") {
        var info = docker.getInfo(container.Id);
        if (isDef(info)) {
          var state = info.State;
          if (state == "created" || state == "running") {
             while(isDef(info) && state != "exited") {
                info = docker.getInfo(container.Id);
                if (isDef(info)) {
                  state = info.State;
                  sleep(500, true); 
                }
             }
          }
        }

        // Done with it
        if (isDef(info)) {
          args.logs = docker.logs(container.Id);
          if (String(args.shouldRemove).toLowerCase() == "true") docker.remove(container.Id);
    
          if (String(args.shouldShowLogs).toLowerCase() == "true") {
            print(args.logs);
          }
        } else {
          throw "Container no longer found.";
        }
      }