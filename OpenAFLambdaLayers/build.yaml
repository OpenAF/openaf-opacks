# Author: Nuno Aguiar
#

ojob:
  argsFromEnvs: true
  async       : true

todo:
  - Get jvm
  - Build minijvm layer
  - Build openaf layer
  - Move layers to output

jobs:
  #-------------------
  - name: Download JRE
    exec: |
      ow.loadObj(); ow.loadFormat();
      var h = new ow.obj.http();
      
      log("Downloading jre...");
      $rest().get2File("jre.tgz", "https://api.adoptopenjdk.net/v2/binary/releases/openjdk11?openjdk_impl=hotspot&os=linux&arch=x64&type=jre&heap_size=normal&release=latest");
      //var o = ow.obj.rest.jsonGet("https://api.adoptopenjdk.net/v2/binary/releases/openjdk11?openjdk_impl=hotspot&os=linux&arch=x64&type=jre&heap_size=normal&release=latest");
      //var si = h.get(o[0].binary_link, void 0, void 0, true, void 0, true);
      //var so = io.writeFileStream("jre.tgz");
      //ioStreamCopy(so, si);

  #---------------------
  - name: Uncompress JRE
    exec: |
      ow.loadFormat();
      log("Uncompressing...");
      io.rm("jre");
      sh("tar xzf jre.tgz", void 0, void 0, false, void 0, void 0, ow.format.streamSHPrefix("untar jre"));
      sh("mv jdk*jre jre", void 0, void 0, false, void 0, void 0, ow.format.streamSHPrefix("mv jre"));
      io.rm("jre.tgz");
 
  #------------------------------
  - name: Remove unneed JRE parts
    exec: |
      log("Removing unneeded parts...");
      $sh("rm -rf jre/man")
      .sh("rm -rf jre/lib/ext/nashorn.jar")
      .sh("rm -rf jre/lib/images")
      .sh("rm -rf jre/legal")
      .exec(0); 

  #-----------------
  - name: Repack JRE
    exec: |
      ow.loadFormat();
      log("Repack JRE...");
      io.rm("minijvm.zip");
      sh("zip -9r minijvm.zip jre", void 0, void 0, false, void 0, void 0, ow.format.streamSHPrefix("unzip jre"));
      //io.rm("jre");
      log("Built minijvm.zip.");


  #--------------
  - name: Get jvm
    to  :
      - Download JRE
      - Uncompress JRE
      - Remove unneed JRE parts

  #--------------------------
  - name: Build minijvm layer
    deps:
      - Get jvm
    to  : 
      - Repack JRE

  #----------------------
  - name: Download OpenAF
    exec: |
      ow.loadObj(); ow.loadFormat();
      var h = new ow.obj.http();

      log("Downloading openaf...");
      //var si = h.get("https://openaf.io/nightly/openaf.jar", void 0, void 0, false, void 0, true);
      var si = h.get("https://openaf.io/openaf.jar", void 0, void 0, false, void 0, true);
      var so = io.writeFileStream("openaf.jar.orig");
      ioStreamCopy(so, si);

      //si = h.get("https://openaf.io/nightly/openaf.jar.repacked", void 0, void 0, false, void 0, true);
      si = h.get("https://openaf.io/openaf.jar.repacked", void 0, void 0, false, void 0, true);
      so = io.writeFileStream("openaf.jar");
      ioStreamCopy(so, si);

      io.rm("openaf");
      io.mkdir("openaf");
      io.mv("openaf.jar", "openaf/openaf.jar");
      log("Downloaded openaf.");

  #---------------------
  - name: Prepare OpenAF
    exec: |
      ow.loadFormat();
      log("Preparing openaf...");
      global.jvmargs = " ";
      sh("jre/bin/java " + global.jvmargs + " -jar openaf/openaf.jar --repack", void 0, void 0, true, void 0, void 0, ow.format.streamSHPrefix("oaf repack"));
      sh("rm openaf/openaf.jar.orig");
      //sleep(2500, true);
      log("Done preparing openaf.");

  #--------------------------------
  - name: Install additional opacks
    exec: |
      ow.loadFormat();
      log("Install additional opacks...");

      args.OPACKS = _$(args.OPACKS).isString().default("ElasticSearch,Notifications,Kube,aws,s3,rss,oJob-common,Mongo");
      var pcks = String(args.OPACKS).split(/,/);
      if (isArray(pcks)) {
        pcks.forEach((v) => {
          sh("jre/bin/java " + global.jvmargs + " -jar openaf/openaf.jar --opack -e \"install " + v + "\"", void 0, void 0, true, void 0, void 0, ow.format.streamSHPrefix(v));
        });
        if (isDef(loadCompiled)) {
          $from(io.listFiles("openaf").files)
          .equals("isDirectory", true)
          .select(r => {
            if (io.fileExists(r.canonicalPath + "/.precompile")) { 
              log("Precompile " + r.canonicalPath + "/.precompile");
              io.readFileYAML(r.canonicalPath + "/.precompile").map(r2 => { loadCompiled(r.canonicalPath + "/" + r2, void 0, true); }); 
            }
          })
        }
      };

      io.rm("openaf/openaf.jar");
      io.rm("openaf-opacks.zip");
      sh("chmod -R a+rw openaf");
      sh("zip -9r openaf-opacks.zip openaf", void 0, void 0, true);

  #--------------------
  - name: Repack openaf
    exec: | 
      io.rm("openaf.zip");
      sh("chmod -R a+rw openaf");
      sh("chmod 755 bootstrap");
      if (isDef(loadCompiled)) {
        loadCompiled("lambda.js", void 0, true);
        sh("zip -9r openaf.zip .openaf_precompiled", void 0, void 0, true);
      }
      sh("zip -9r openaf.zip openaf", void 0, void 0, true);
      sh("zip -9r openaf.zip lambda.js", void 0, void 0, true);
      sh("zip -9r openaf.zip bootstrap", void 0, void 0, true);
      log("Built openaf.zip.");
      //io.rm("openaf/openaf.jar");

  #-------------------------
  - name: Build openaf layer
    deps:
      - Get jvm
    to  :
      - Download OpenAF
      - Prepare OpenAF
      - Repack openaf
      - Install additional opacks

  #----------------------------
  - name: Move layers to output
    deps:
      - Build openaf layer
      - Build minijvm layer
    exec: |
      io.cp("openaf.zip", "/output/openaf.zip");
      io.cp("openaf-opacks.zip", "/output/openaf-opacks.zip");
      io.cp("minijvm.zip", "/output/minijvm.zip");
