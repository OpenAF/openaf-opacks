jobs:
  # ---------------------
  - name : S3 Make bucket
    help : 
      text   : "Creates a S3 bucket."
      expects:
      - name    : url
        desc    : The S3 endpoint URL
        required: true
      - name    : bucket
        desc    : The S3 bucket name
        required: true
      - name    : accessKey
        desc    : The access key to the S3 service
        required: false
      - name    : secret
        desc    : The secret key to the S3 service
        required: false
      - name    : region
        desc    : The S3 region
        required: false
    typeArgs:
      shortcut:
        name  : S3MakeBucket
        keyArg: bucket
        args  :
          url      : url
          accessKey: accessKey
          secret   : secret
          region   : region
    check:
      in:
        url      : isString
        bucket   : isString
        accessKey: isString.default(__)
        secret   : isString.default(__)
        region   : isString.default(__)
    exec : |
      loadLib("s3.js")
      var s3 = new S3(args.url, args.accessKey, args.secret, args.region)
      s3.makeBucket(args.bucket, args.region)
      s3.close()
      
  # ----------------------
  - name : S3 List Buckets
    help :
      text   : Retrieves a list of buckets. If successfull the list will be output to args.list.
      expects:
      - name    : url
        desc    : The S3 endpoint URL
        required: true
      - name    : accessKey
        desc    : The access key to the S3 service
        required: false
      - name    : secret
        desc    : The secret key to the S3 service
        required: false
      - name    : region
        desc    : The S3 region
        required: false
      returns:
      - name: list
        desc: The list of buckets
    typeArgs:
      shortcut:
        name: S3ListBuckets
        args:
          url      : url
          accessKey: accessKey
          secret   : secret
          region   : region
    check :
      in:
        url          : isString
        accessKey    : isString.default(__)
        secret       : isString.default(__)
        region       : isString.default(__)  
    exec : |
      loadLib("s3.js")
      var s3 = new S3(args.url, args.accessKey, args.secret, args.region)
      args.list = s3.listBuckets()
      s3.close()

  # --------------
  - name : S3 List
    help :
      text   : Retrieves the list of objects in a S3 Bucket. If successfull the list will be output to args.list.
      expects:
      - name    : url
        desc    : The S3 endpoint URL
        required: true
      - name    : bucket
        desc    : The S3 bucket name
        required: true
      - name    : accessKey
        desc    : The access key to the S3 service
      - name    : secret
        desc    : The secret key to the S3 service
      - name    : region
        desc    : The S3 region
      - name    : objectPrefix
        desc    : The object prefix
      - name    : needFull
        desc    : Boolean to determine if the list needs to include the contentType (default false)
      - name    : needRecursive
        desc    : Boolean to determine if the list should recursive (default false)
      - name    : metric
        desc    : Identify the oJob metric to use (only for openaf version > 20211103)
      returns:
      - name    : list
        desc    : The corresponding list of objects
    typeArgs:
      shortcut:
        name  : S3ListObjs
        keyArg: objectPrefix
        args  :
          url          : url
          bucket       : bucket
          accessKey    : accessKey
          secret       : secret
          region       : region
          needFull     : needFull
          needRecursive: needRecursive
          metric       : metric
    check:
      in:
        url          : isString
        bucket       : isString
        accessKey    : isString.default(__)
        secret       : isString.default(__)
        region       : isString.default(__)
        objectPrefix : isString.default(__)
        needFull     : toBoolean.isBoolean.default(false)
        needRecursive: toBoolean.isBoolean.default(false)
        metric       : isString.default({__})
    exec : |
      var _met = {}
      if (isDef(args.metric)) _met = _$(ow.oJob.getMetric(args.metric)).isMap().default({})

      loadLib("s3.js");

      var t = now()
      var s3 = new S3(args.url, args.accessKey, args.secret, args.region);
      _met.connTime = now() - t

      if (isDef(args.metric)) {
        ow.loadNet()
        _met.socketLatency = ow.net.testURLLatency(args.url)
      }

      var listmetric = "ListObjects" + (args.needRecursive ? "Recursive" : "")
      t = now()
      args.list = s3.listObjects(args.bucket, args.objectPrefix, args.needFull, args.needRecursive);
      _met[listmetric + "Time"] = _$(_met[listmetric + "Time"]).isNumber().default(0) + (now() - t)
      _met[listmetric + "Ops"]  = _$(_met[listmetric + "Ops"]).isNumber().default(0) + 1
      if (isArray(args.list)) _met[listmetric + "ResultCount"] = _$(_met[listmetric + "ResultCount"]).isNumber().default(0) + args.list.length

      if (isDef(args.metric)) {
        _met.id          = args.metric
        _met.type        = "s3"
        ow.oJob.setMetric(args.metric, _met)
      }

      s3.close()
      
  #------------------------
  - name : S3 Remove bucket
    help :
      text   : Removes a S3 bucket.
      expects:
      - name    : url
        desc    : The S3 endpoint URL
        required: true
      - name    : bucket
        desc    : The S3 bucket name
        required: true
      - name    : accessKey
        desc    : The access key to the S3 service
      - name    : secret
        desc    : The secret key to the S3 service
      - name    : region
        desc    : The S3 region
    typeArgs:
      shortcut:
        name  : S3RemoveBucket
        keyArg: bucket
        args  :
          url      : url
          accessKey: accessKey
          secret   : secret
          region   : region
    check:
      in:
        url      : isString
        bucket   : isString
        accessKey: isString.default(__)
        secret   : isString.default(__)
        region   : isString.default(__)
    exec : |      
      loadLib("s3.js");
      var s3 = new S3(args.url, args.accessKey, args.secret, args.region);
      s3.removeBucket(args.bucket);      
      s3.close() 

  #---------------------
  - name : S3 Put object
    help :
      text   : Sends an object to a S3 bucket.
      expects:
      - name    : url
        desc    : The S3 endpoint URL
        required: true
      - name    : bucket
        desc    : The S3 bucket name
        required: true
      - name    : accessKey
        desc    : The access key to the S3 service
      - name    : secret
        desc    : The secret key to the S3 service
      - name    : region
        desc    : The S3 region
      - name    : objectName
        desc    : The S3 object name to use
      - name    : localPath
        desc    : The local path file to send to the bucket
      - name    : meta 
        desc    : The meta map object to add to the object
    typeArgs:
      shortcut:
        name  : S3PutObj
        keyArg: objectName
        args  :
          localPath: localPath
          meta     : meta
          url      : url
          bucket   : bucket
          accessKey: accessKey
          secret   : secret
          region   : region
    check:
      in:
        url       : isString
        bucket    : isString
        accessKey : isString.default(__)
        secret    : isString.default(__)
        region    : isString.default(__)
        objectName: isString
        localPath : isString
        meta      : isMap.default(__)
    exec : |
      loadLib("s3.js");
      var s3 = new S3(args.url, args.accessKey, args.secret, args.region);
      s3.putObject(args.bucket, args.objectName, args.localPath, args.meta);  
      s3.close()

  #-------------------------------
  - name : S3 Put snowball objects
    help :
      text   : Sends, a snowball tar object, to a S3 bucket based on array or folder.
      expects:
      - name    : url
        desc    : The S3 endpoint URL
        required: true
      - name    : bucket
        desc    : The S3 bucket name
        required: true
      - name    : accessKey
        desc    : The access key to the S3 service
      - name    : secret
        desc    : The secret key to the S3 service
      - name    : region
        desc    : The S3 region
      - name    : prefix
        desc    : The S3 object prefix to use
      - name    : filepaths
        desc    : A local folder or an array of filepaths to send to the bucket via snowball tar
      - name    : localPrefix 
        desc    : Local path prefix to remove from the filepaths provided
    typeArgs:
      shortcut:
        name  : S3PutSnowObj
        keyArg: prefix
        args  :
          url        : url
          accessKey  : accessKey
          secret     : secret
          region     : region
          bucket     : bucket
          filepaths  : filepaths
          localPrefix: localPrefix
    check:
      in:
        url        : isString
        bucket     : isString
        accessKey  : isString.default(__)
        secret     : isString.default(__)
        region     : isString.default(__)
        prefix     : isString.default("")
        localPrefix: isString.default(__)
    exec : |
      loadLib("s3.js")
      var s3 = new S3(args.url, args.accessKey, args.secret, args.region)
      s3.putSnowballObjects(args.bucket, args.prefix, args.filepaths, args.localPrefix)
      s3.close()

  # --------------------
  - name : S3 Get object
    help :
      text   : Retrieves an object from a S3 bucket.
      expects:
      - name    : url
        desc    : The S3 endpoint URL
        required: true
      - name    : bucket
        desc    : The S3 bucket name
        required: true
      - name    : accessKey
        desc    : The access key to the S3 service
      - name    : secret
        desc    : The secret key to the S3 service
      - name    : region
        desc    : The S3 region
      - name    : objectName
        desc    : The S3 object name to use
        required: true
      - name    : localPath
        desc    : The local path to store the object
        required: true
    typeArgs:
      shortcut:
        name  : S3GetObj
        keyArg: objectName
        args  :
          url      : url
          accessKey: accessKey
          bucket   : bucket
          secret   : secret
          region   : region
          localPath: localPath
    check:
      in:
        url       : isString
        bucket    : isString
        accessKey : isString.default(__)
        secret    : isString.default(__)
        region    : isString.default(__)
        objectName: isString
        localPath : isString
    exec : |
      loadLib("s3.js");
      var s3 = new S3(args.url, args.accessKey, args.secret, args.region);
      s3.getObject(args.bucket, args.objectName, args.localPath);
      s3.close()

  # ----------------------
  - name: S3 Remove object
    help: 
      text   : Removes an object from a S3 bucket.
      expects:
      - name    : url
        desc    : The S3 endpoint URL
        required: true
      - name    : bucket
        desc    : The S3 bucket name
        required: true
      - name    : accessKey
        desc    : The access key to the S3 service
      - name    : secret
        desc    : The secret key to the S3 service
      - name    : region
        desc    : The S3 region
      - name    : objectName
        desc    : The S3 object name to remove
        required: true
    typeArgs:
      shortcut:
        name  : S3RemoveObj
        keyArg: objectName
        args  :
          url      : url
          accessKey: accessKey
          bucket   : bucket
          secret   : secret
          region   : region
    check:
      in:
        url       : isString
        bucket    : isString
        accessKey : isString.default(__)
        secret    : isString.default(__)
        region    : isString.default(__)
        objectName: isString
    exec: | 
      loadLib("s3.js");
      var s3 = new S3(args.url, args.accessKey, args.secret, args.region);
      s3.removeObject(args.bucket, args.objectName);
      s3.close()

  # ----------------------------------
  - name : S3 Remove objects by prefix
    help :
      text   : Remove objects by a specific prefix
      expects:
      - name    : url
        desc    : The S3 endpoint URL
        required: true
      - name    : accessKey
        desc    : The access key to the S3 service
      - name    : secret
        desc    : The secret key to the S3 service
      - name    : region
        desc    : The S3 region
      - name    : bucket
        desc    : The S3 bucket
        required: true
      - name    : prefix
        desc    : The object prefix to delete
        required: true
      - name    : limitPerCall
        desc    : The limit per call (AWS is limited per 1000 calls)
    typeArgs:
      shortcut:
        name  : S3RemoveObjsByPrefix
        keyArg: prefix
        args  :
          url         : url
          accessKey   : accessKey
          bucket      : bucket
          secret      : secret
          region      : region
          limitPerCall: limitPerCall
    check:
      in:
        url         : isString
        bucket      : isString
        accessKey   : isString.default(__)
        secret      : isString.default(__)
        region      : isString.default(__)
        prefix      : isString
        limitPerCall: isNumber.default(__)
    exec : |
      loadLib("s3.js")
      var s3 = new S3(args.url, args.accessKey, args.secret, args.region)
      s3.removeObjectsByPrefix(args.bucket, args.prefix, args.limitPerCall)
      s3.close()

  # ---------------------
  - name : S3 Copy object
    help : 
      text   : Copy an object between S3 buckets.
      expects:
      - name    : url
        desc    : The S3 endpoint URL
        required: true
      - name    : accessKey
        desc    : The access key to the S3 service
      - name    : secret
        desc    : The secret key to the S3 service
      - name    : region
        desc    : The S3 region
      - name    : sourceBucket
        desc    : The S3 source bucket
        required: true
      - name    : sourceObject
        desc    : The S3 source object name
        required: true
      - name    : targetBucket
        desc    : The S3 target bucket
        required: true
      - name    : targetObject
        desc    : The S3 target object name
        required: true
      - name    : meta
        desc    : Change the S3 target object map metadata
      - name    : copyOptions
        desc    : Optionally specify a map with matchETag (string), matchETagNone (string), modified, unmodified
    typeArgs:
      shortcut:
        name  : S3CopyObj
        keyArg: copyOptions
        args  :
          url         : url
          accessKey   : accessKey
          secret      : secret
          region      : region
          meta        : meta
          sourceObject: sourceObject
          sourceBucket: sourceBucket
          targetObject: targetObject
          targetBucket: targetBucket
    check:
      in:
        url         : isString
        bucket      : isString
        accessKey   : isString.default(__)
        secret      : isString.default(__)
        region      : isString.default(__)
        sourceBucket: isString
        sourceObject: isString
        targetBucket: isString
        targetObject: isString
        meta        : isMap.default(__)
        copyOptions : isMap.default(__)
    exec : |
      loadLib("s3.js");
      var s3 = new S3(args.url, args.accessKey, args.secret, args.region);
      s3.copyObject(args.sourceBucket, args.sourceObject, args.targetBucket, args.targetObject, args.meta, args.copyOptions);
      s3.close()

  # ---------------------
  - name : S3 Sync folder
    help :
      text   : Sync the files of a local folder with a S3 bucket prefix. Optionally squash remote or local files.
      expects:
      - name    : url
        desc    : The S3 endpoint URL
        required: true
      - name    : accessKey
        desc    : The access key to the S3 service
      - name    : secret
        desc    : The secret key to the S3 service
      - name    : region
        desc    : The S3 region
      - name    : bucket
        desc    : The S3 bucket
        required: true
      - name    : prefix
        desc    : The S3 prefix
      - name    : localPath
        desc    : The local path
        required: true
      - name    : squash
        desc    : If defined and squash=remote it will take the local state and overwrite/delete on the S3 bucket. If squash=lost it will take the remote state and overwrite/delete on the local path.
      - name    : execute
        desc    : If execute=true the actions will be executed
      - name    : numThreads
        desc    : If defined it will force the number of threads to use if execute=true
      - name    : ignore
        desc    : An array of actions to ignore
      returns:
      - name: actions
        desc: List of sync actions
    typeArgs:
      shortcut:
        name  : S3Sync
        keyArg: squash
        args  :
          url         : url
          accessKey   : accessKey
          secret      : secret
          region      : region
          bucket      : bucket
          prefix      : prefix
          localPath   : localPath
          execute     : execute
          numThreads  : numThreads
    check:
      in:
        url         : isString
        bucket      : isString
        accessKey   : isString.default(__)
        secret      : isString.default(__)
        region      : isString.default(__)
        squash      : isString.default("")
        prefix      : isString.default("")
        localPath   : isString
        numThreads  : toNumber.isNumber.default(__)
        execute     : toBoolean.isBoolean.default(false)
        ignore      : isArray.default([])
    exec : |
      loadLib("s3.js")
      var s3 = new S3(args.url, args.accessKey, args.secret, args.region)

      switch(args.squash.toLowerCase()) {
      case "remote":
        args.actions = s3.squashRemoteActions(args.bucket, args.prefix, args.localPath)
        break
      case "local" :
        args.actions = s3.squashLocalActions(args.bucket, args.prefix, args.localPath)
        break
      default      :
        args.actions = s3.syncActions(args.bucket, args.prefix. args.localPath)
      }

      if (args.execute) {
        s3.execActions(args.actions, __, __, args.numThreads, args.ignore)
      }
      
      s3.close()