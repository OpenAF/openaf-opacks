include:
- oJobHTTPd.yaml
- oJobBrowse.yaml
 
jobs:
# ---------------------
- name : HTTP S3 Browse
  deps :
  - HTTP Start Server
  to   : HTTP Service
  typeArgs:
    noLog: false 
    shortcut:
      name  : httpdS3Browse
      keyArg: port
      args  : 
        url      : url
        bucket   : bucket
        accessKey: accessKey
        secret   : secret
        region   : region
        uri      : uri
        path     : path
        browse   : browse
        default  : default
        logo     : logo
        restrict : restrict
        incURI   : incURI
        cache    : cache
        sortTab  : sortTab
  help : 
   text   : Provides a HTTP S3 objects browse definition. 
   expects:
   - name: port
     desc: (Number) The port where the server was made available (default is 8091)
   - name: uri
     desc: (String) The URI where the HTTP S3 objects Browse will be available.
   - name: path
     desc: (String) The canonical path (the prefix) to the folder that contains the file to be browsed.
   - name: browse
     desc: (String) If "false" no browsing interface is included.
   - name: default
     desc: (String) The markdown or html filename to consider default (e.g. index.md)
   - name: logo
     desc: (String) The logo to include on the top right corner
   - name: restrict
     desc: (String/Array) A regular expression (or list) that if matched won't be listed
   - name: incURI
     desc: (Boolean) If true includes the URI in the breadcrumbs
   - name: cache
     desc: (Number) The cache time in ms for the S3 object lists
   - name: sortTab
     desc: (Boolean) If true includes the table sorting script (OpenAF >= 20250402)
  check:
    in:
      url      : isString
      bucket   : isString
      accessKey: isString.default(__)
      secret   : isString.default(__)
      region   : isString.default(__)
      port     : toNumber.isNumber.default(8091)
      uri      : isString.default("/")
      path     : isString.default("")
      browse   : toBoolean.isBoolean.default(true)
      default  : isString.default(__)
      logo     : isString.default("/fonts/openaf_small.png")
      restrict : default(__)
      incURI   : toBoolean.isBoolean.default(false)
      cache    : toNumber.isNumber.default(__)
      sortTab  : toBoolean.isBoolean.default(false)
  args : 
   execURI   : | #js
      var shouldBrowse = global.__MHTTPD[String(port) + uri].BROWSE
      var path         = global.__MHTTPD[String(port) + uri].PATH
      var tmplb        = global.__MHTTPD[String(port) + uri].TMPLB
      var tmplh        = global.__MHTTPD[String(port) + uri].TMPLH
      var fdefault     = global.__MHTTPD[String(port) + uri].DEFAULT
      var s3           = global.__MHTTPD[String(port) + uri].S3
      var bucket       = global.__MHTTPD[String(port) + uri].BUCKET
      var restrict     = global.__MHTTPD[String(port) + uri].RESTRICT
      var incURI       = global.__MHTTPD[String(port) + uri].INCURI
      var origuri      = global.__MHTTPD[String(port) + uri].URI
      var cache        = global.__MHTTPD[String(port) + uri].CACHE
      var sortTab      = global.__MHTTPD[String(port) + uri].SORTTAB

      var content = ""
      var puri = String(request.uri).replace(new RegExp("^" + uri), (uri == "/" ? "" : "/")).replace(/\/+/g, "/")
      var furi = String(puri).replace(/\\+/g, "/")

      if (!puri.endsWith("/")) puri += "/"

      var lst, origLst
      try { 
         // List and restrict
         if (isDef(cache)) {
            lst = $cache(cache).get({ puri: (puri == "/" ? "" : puri).replace(/^\//, "") })
         } else {
            lst = s3.listObjects(bucket, path + (puri == "/" ? "" : puri).replace(/^\//, ""))
         }

         origLst = lst
         if (isDef(restrict)) {
            if (isString(restrict)) restrict = [ restrict ]
            lst = lst.filter(f => restrict.reduce((aP, aC) => (aP && !(new RegExp(aC)).test(f.filename)), true))
         }

         // If not listed check if puri is restricted
         if (lst.length == 0 && isDef(restrict) && origLst.length != lst.length) {
            if (puri != "/" && puri != "") {
              return server.reply(ow.template.parseMD2HTML("## Restricted access\n\nYou do not have access to this folder.\n", true))
            }
         }
      } catch(e) {
         logErr(e)
         return server.replyOKHTML(ow.template.parseMD2HTML(tmplh({ puri : (puri == "" ? "/" : puri) }) + "\n" + "\n*no content available*\n", true))
      }

      try {
        if (origLst.length > 0) { 
          if (isDef(fdefault) && $from(lst).equals("filepath", rfuri + "/" + fdefault).any()) {
              return (fdefault.endsWith(".md") ? 
                      ow.server.httpd.replyFileMD(server, s3.getObjectStream(bucket, path + puri), uri, request.uri + "/" + fdefault) : ow.server.httpd.replyFile(server, s3.getObjectStream(bucket, path + puri), uri, request.uri + "/" + fdefault))
          } else {
              if (shouldBrowse) { 
                content += tmplh({ puri: (puri == "" ? "/" : puri) })
                content += "|   | Filename | Last modified | Size | Size in bytes |\n"
                content += "|---|----------|:--------------|-----:|--------------:|\n"
                if (puri != "/" && puri != "") 
                  content += "| <span style=\"color: #a0a0a0;\">&#8598;</span> | __[..](<" + uri + puri.replace(/[^\/]+\/$/, "") + ">)__ | | |\n"

                var theList = $from(lst).sort("-isDirectory", "filename").notEquals("filepath", "/").select(f => {
                  if (f.filename.endsWith("/")) f.filename = f.filename.substr(0, f.filename.length-1)
                  return merge(f, {
                    fLastModified: isDef(f.lastModified) ? ow.format.fromDate(new Date(f.lastModified), 'yyyy-MM-dd HH:mm:ss') : "",
                    fSize        : ow.format.toBytesAbbreviation(f.size),
                    puri         : puri,
                    uri          : uri,
                    filename     : f.filename.substr(f.filename.substr(0, f.filename.length-1).lastIndexOf("/") + 1)
                  })
                })
                content += tmplb(theList)
              }
          }
        } else {
          if (request.params.raw == "true") {
              return ow.server.httpd.replyFile(server, s3.getObjectStream(bucket, path + furi.replace(/^\//, "")), uri, request.uri)
          } else {
              var ext = String(furi).replace(/^.*\./, "")
              var _downloadcode = `<span><script>
                function downloadText(aFile) {
                  var selectedText = document.querySelectorAll("pre")[0].innerText
                  const blob = new Blob([selectedText], { type: "text/plain" })
                  const url = URL.createObjectURL(blob)
                  const a = document.createElement("a")
                  a.href = url
                  a.download = aFile
                  document.body.appendChild(a)
                  a.click()
                  document.body.removeChild(a)
                  URL.revokeObjectURL(url)
                }
              </script></span>`
              var fn = () => ow.server.httpd.replyFileMD(server, s3.getObjectStream(bucket, path + furi.replace(/^\//, "")), uri, request.uri)
              var fnLang = (lang, puri) => {
                ow.loadTemplate()
                var _displayURI = uri.replace(/\/$/, "")
                _displayURI = _displayURI.replace(new RegExp("^" + origuri), "")
                _displayURI += puri
                return server.reply( ow.template.parseMD2HTML("## " + $t("{{{s3-buildBreadcrumbs '" + _displayURI + "' '" + uri + "' " + incURI + "}}}") + "<span onclick=\"history.back()\" onmouseout=\"this.style.textDecoration='none';\" onmouseover=\"this.style.textDecoration='underline';\" style=\"padding-left: 1em; float: right; text-decoration: none; cursor: pointer;\"><a href=\"javascript:history.back()\">&larr;</a></span><span onclick=\"downloadText('" + puri.replace(/\/?$/,"").substr(puri.replace(/\/?$/,"").lastIndexOf("/")+1) + "')\" onmouseout=\"this.style.textDecoration='none';\" onmouseover=\"this.style.textDecoration='underline';\" style=\"padding-left: 1em; float: right; text-decoration: none; cursor: pointer;\"><a href=\"javascript:downloadText('" + puri.replace(/\/?$/,"").substr(puri.replace(/\/?$/,"").lastIndexOf("/")+1) + "')\">&darr;</a></span>\n\n```" + lang + "\n" + af.fromInputStream2String(s3.getObjectStream(bucket, path + furi.replace(/^\//, ""))) + "\n```\n" + _downloadcode, true, true), "text/html", 200)
              }
              switch(ext) {
              case "md"  : return fn()
              case "yml" :
              case "yaml": return fnLang("yaml", puri)
              case "sh"  : return fnLang("sh", puri)
              case "css" : return fnLang("css", puri)
              case "sh"  : return fnLang("sh", puri)
              case "js"  : return fnLang("js", puri)
              case "java": return fnLang("java", puri)
              case "py"  : return fnLang("python", puri)
              case "toml": return fnLang("toml", puri)
              case "hbs" : return fnLang("handlebars", puri)
              case "log" : return fnLang("text", puri)
              case "json":
                if (request.params.parse == "false") {
                  return fnLang("json", puri)
                } else {
                  var _d = jsonParse( af.fromInputStream2String( s3.getObjectStream(bucket, path + furi.replace(/^\//, "")) ) )
                  if (isMap(_d) || isArray(_d))
                    return ow.server.httpd.replyJSMap(server, _d)
                  else
                    return fn()           
                }        
              case "adoc":
                if (isDef(getOPackPath("Asciidoc"))) {
                  loadLib("asciidoc.js")
                  return ow.server.httpd.replyAsciidoc(server, s3.getObjectStream(bucket, path + furi.replace(/^\//, "")), uri, request.uri)
                }
              default: 
                return ow.server.httpd.replyFile(server, s3.getObjectStream(bucket, path + furi.replace(/^\//, "")), uri, request.uri, __, __, {
                  "Content-Type": ow.server.httpd.getMimeType(furi)
                })
              }
          }
        }
      } catch(eg) {
        logErr(af.toSLON(request) + " | " + eg)
        return server.replyOKHTML(ow.template.parseMD2HTML(tmplh({ puri : (puri == "" ? "/" : puri) }) + "\n" + "\n*no content available*\n", true))
      }

      if (sortTab) content += "<script src=\"/js/mdtablesort.js\"></script>\n"

      if (shouldBrowse)
         return server.replyOKHTML(ow.template.parseMD2HTML(content, true))
      else
         return server.replyOKHTML(ow.template.parseMD2HTML(tmplh({ puri : (puri == "" ? "/" : puri) }) + "\n" + "\n*no content available*\n", true))
     
  exec : | #js
      ow.loadTemplate(); ow.loadFormat()
      ow.template.addHelper("encodeURI", encodeURI)
      
      loadLib("s3.js")

      args.uri  = _$(args.uri).isString().default("/")
      args.path = _$(args.path).isString().default(".")

      ow.template.addHelper("escapeMDTable", str => str.replace(/\|/g, "\\|"))
      ow.template.addHelper("s3-buildBreadcrumbs", (path, _uri, _incURI) => {
        // Remove any leading or trailing slashes and split into segments.
        const trimmedPath = path.replace(/^\/|\/$/g, '')
        const segments = trimmedPath ? trimmedPath.split('/') : []
        
        // Start with the clickable root.
        let html = ""
        if (_incURI) 
          html = `<a href="/" title="Navigate to root"> / </a> <a href="${_uri}" title="Navigate to main">${_uri.replace(/^\/*|\/*$/, "")} / </a>`
        else 
          html = `<a href="${_uri}" title="Navigate to root"> / </a>`
        
        let currentPath = _uri
        segments.forEach((segment, index) => {
          currentPath += "/" + segment  // Build up the path.
          // Add separator before each segment.
          if (index > 0) html += ' / '
          
          // If it's the last segment (current location), show as plain text.
          if (index === segments.length - 1) {
            html += `<span>${segment}</span>`
          } else {
            html += `<a href="${currentPath}/" title="Navigate to ${currentPath}/">${segment}</a>`
          }
        })

        return html
      })

      args.logo = _$(args.logo, "logo").isString().default("/fonts/openaf_small.png")

      var temph = _$(args.templateHead).isString().default("## {{{s3-buildBreadcrumbs puri '" + args.uri + "' " + args.incURI + "}}}<img style=\"padding-left: 1em;\" align=\"right\" src=\"" + args.logo + "\">\n")
      var templ = _$(args.template).isString().default("{{#each this}}| {{#if isDirectory}}<span style=\"color: #a0a0a0;\">&#8600;</span>{{else}}<a href=\"{{encodeURI uri}}{{encodeURI puri}}{{encodeURI filename}}?raw=true\" download=\"{{encodeURI filename}}\">&darr;</a>{{/if}} | {{#if isDirectory}}__[{{escapeMDTable filename}}](<{{encodeURI uri}}{{encodeURI puri}}{{encodeURI filename}}>)__ | {{fLastModified}} | | {{else}} [{{escapeMDTable filename}}](<{{encodeURI uri}}{{encodeURI puri}}{{encodeURI filename}}>) | {{fLastModified}} {{/if}} | {{fSize}} | {{size}} | \n{{/each}}")

      var _cache, s3
      var s3 = new S3(args.url, args.accessKey, args.secret, args.region)
      if (isNumber(args.cache)) {
        _cache = "__oJobS3_" + md5(args.url + args.bucket)
        log("Creating cache " + _cache + "...")
        $cache(_cache)
        .ttl(args.cache)
        .fn(k => {
          log("  cache get " + af.toSLON(k)) 
          var _r = s3.listObjects(args.bucket, args.path + k.puri)
          return _r
        })
        .create()
      }

      if (isDef(args.path) && args.path.length > 0) {
        if (isUnDef(args.restrict)) args.restrict = []
        args.restrict.push("^(?!" + args.path.replace(/^\//, "") + ").*")
      }

      global.__MHTTPD = _$(global.__MHTTPD).isMap().default({})
      global.__MHTTPD[String(args.port) + args.uri] = {
        BROWSE  : args.browse,
        PATH    : String(args.path),
        TMPLB   : ow.template.execCompiled(ow.template.compile(templ)),
        TMPLH   : ow.template.execCompiled(ow.template.compile(temph)),
        INCURI  : args.incURI,
        URI     : args.uri,
        DEFAULT : args.default,
        S3      : s3,
        BUCKET  : args.bucket,
        RESTRICT: args.restrict,
        CACHE   : _cache,
        SORTTAB : args.sortTab
      }

# -----------------------
- name : HTTP Browse - s3
  to   : HTTP Browse generic
  typeArgs:
    noLog   : false 
    shortcut:
      name  : S3Browse
      keyArg: port
      args  : 
        url      : url
        bucket   : bucket
        accessKey: accessKey
        secret   : secret
        region   : region
        uri      : uri
        path     : path
        browse   : browse
        default  : default
        logo     : logo
        restrict : restrict
        incURI   : incURI
        cache    : cache
        sortTab  : sortTab
        options  : options
  exec : | #js
    args.options = merge(args.options, {
      showURI: args.incURI,
      sortTab: args.sortTab,
      logo   : args.logo,
      browse : args.browse,
      default: args.default
    })

    load("s3.js")
    var s3 = new S3(args.url, args.accessKey, args.secret, args.region)

    args.fns = {
      getList: (request, options) => {
        const uri = request.uri
        var puri = uri.replace(new RegExp("^" + options.parentURI + "/?"), "")

        var lst, origLst
        var _s3p = options.parentPath + puri
        _s3p = _s3p + (_s3p.endsWith("/") ? "" : "/")
        _s3p = _s3p.replace(/^\//, "")

        if (isDef(args.cache)) {
          _cache = "__oJobS3_" + md5(args.url + args.bucket)
          lst = $cache(_cache).get({ puri: _s3p })
        } else {
          lst = s3.listObjects(args.bucket, _s3p)
        }
        origLst = lst
        if (isDef(args.restrict)) {
          if (isString(args.restrict)) args.restrict = [ args.restrict ]
          lst = lst.filter(f => args.restrict.reduce((aP, aC) => (aP && !(new RegExp(aC)).test(f.filename)), true))
        }

        if (origLst.length > 0) {
          return {
            isList: true,
            fields: [ "Object", "Last modified", "Size", "Size in bytes" ],
            alignFields: [ "left", "left", "right", "right" ],
            key: [ "Object" ],
            list: lst.filter(r => r.filename != "/").map(f => {
              var _f = f.filename.replace(/\/$/, "").replace(new RegExp("^.+/"), "")
              if (isDef(args.path)) _f = _f.replace(new RegExp("^" + args.path), "")
              return {
                isDirectory: f.isDirectory,
                values: {
                  Object: _f,
                  "Last modified": isUnDef(f.lastModified) ? "" : ow.format.fromDate(new Date(f.lastModified), "yyyy-MM-dd HH:mm:ss"),
                  Size: f.isFile ? ow.format.toBytesAbbreviation(f.size) : "",
                  "Size in bytes": f.isFile ? f.size : ""
                }
              }
            }),
          }
        } else {
          return { isFile: true }
        }
      },
      getObj: (request, options) => {
        const uri = request.uri
        var puri = uri.replace(new RegExp("^" + options.parentURI + "/?"), "")

        var ext = String(puri).replace(/^.*\./, "")
        puri = puri.replace(/^\//, "")

        if (isDef(args.restrict)) {
          if (isString(args.restrict)) args.restrict = [ args.restrict ]
          var _go = true
          if (args.restrict.length > 0) {
            _go = args.restrict.reduce((aP, aC) => (aP && !(new RegExp(aC)).test(puri)), true)
          }
          if (!_go) return { data: "no content", type: "md" }
        }

        switch(ext) {
        case "md"  : return { data: af.fromInputStream2String(s3.getObjectStream(args.bucket, puri)), type: "md" }
        case "yml" :
        case "yaml": return { data: af.fromInputStream2String(s3.getObjectStream(args.bucket, puri)), type: "yaml" }
        case "css" : return { data: af.fromInputStream2String(s3.getObjectStream(args.bucket, puri)), type: "css" }
        case "sh"  : return { data: af.fromInputStream2String(s3.getObjectStream(args.bucket, puri)), type: "sh" }
        case "js"  : return { data: af.fromInputStream2String(s3.getObjectStream(args.bucket, puri)), type: "js" }
        case "java": return { data: af.fromInputStream2String(s3.getObjectStream(args.bucket, puri)), type: "java" }
        case "py"  : return { data: af.fromInputStream2String(s3.getObjectStream(args.bucket, puri)), type: "python" }
        case "toml": return { data: af.fromInputStream2String(s3.getObjectStream(args.bucket, puri)), type: "toml" }
        case "hbs" : return { data: af.fromInputStream2String(s3.getObjectStream(args.bucket, puri)), type: "handlebars" }
        case "json": return { data: jsonParse(af.fromInputStream2String(s3.getObjectStream(args.bucket, puri))), type: "json" }  
        case "adoc": return { stream: s3.getObjectStream(args.bucket, puri), type: "asciidoc" }            
        default:
          return { stream: s3.getObjectStream(args.bucket, puri) }
        }
      },
      init  : () => {
        var _cache
        
        if (isNumber(args.cache)) {
          _cache = "__oJobS3_" + md5(args.url + args.bucket)
          log("Creating cache " + _cache + "...")
          $cache(_cache)
          .ttl(args.cache)
          .fn(k => {
            log("  cache get " + af.toSLON(k)) 
            var _r = s3.listObjects(args.bucket, args.path + k.puri)
            return _r
          })
          .create()
        }
      }
    }